Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo: const VkInstanceCreateInfo* = 0x7ffedffdb4d0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext: const void* = NULL
        flags: VkInstanceCreateFlags = 0
        pApplicationInfo: const VkApplicationInfo* = 0x7ffedffdb720:
            sType: VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext: const void* = NULL
            pApplicationName: const char* = "LearnVulkan-DEBUG"
            applicationVersion: uint32_t = 4194304
            pEngineName: const char* = "No Engine"
            engineVersion: uint32_t = 4194304
            apiVersion: uint32_t = 4198400
        enabledLayerCount: uint32_t = 2
        ppEnabledLayerNames: const char* const* = 0x7ffedffde680
            ppEnabledLayerNames[0]: const char* const = "VK_LAYER_KHRONOS_validation"
            ppEnabledLayerNames[1]: const char* const = "VK_LAYER_LUNARG_api_dump"
        enabledExtensionCount: uint32_t = 4
        ppEnabledExtensionNames: const char* const* = 0x60300006e1d0
            ppEnabledExtensionNames[0]: const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]: const char* const = "VK_EXT_metal_surface"
            ppEnabledExtensionNames[2]: const char* const = "VK_EXT_debug_utils"
            ppEnabledExtensionNames[3]: const char* const = "VK_KHR_get_surface_capabilities2"
        pNext: VkDebugUtilsMessengerCreateInfoEXT = 0x7ffedffdb820:
            sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
            pNext: const void* = NULL
            flags: VkDebugUtilsMessengerCreateFlagsEXT = 0
            messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
            messageType: VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
            pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = 1
            pUserData: void* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pInstance: VkInstance* = 0x62900005a200

Thread 0, Frame 0:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance: VkInstance = 0x62900005a200
    pCreateInfo: const VkDebugUtilsMessengerCreateInfoEXT* = 0x7ffedffdb860:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
        pNext: const void* = NULL
        flags: VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType: VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = 1
        pUserData: void* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pMessenger: VkDebugUtilsMessengerEXT* = 0x602000030570

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance: VkInstance = 0x62900005a200
    pPhysicalDeviceCount: uint32_t* = 1
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance: VkInstance = 0x62900005a200
    pPhysicalDeviceCount: uint32_t* = 1
    pPhysicalDevices: VkPhysicalDevice* = 0x7ffedffd9bf0
        pPhysicalDevices[0]: VkPhysicalDevice = 0x60300017bae0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties* = 0x618000021480:
        apiVersion: uint32_t = 4198576
        driverVersion: uint32_t = 10103
        vendorID: uint32_t = 32902
        deviceID: uint32_t = 34752
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x618000021594
            pipelineCacheUUID[0]: uint8_t = 85
            pipelineCacheUUID[1]: uint8_t = 221
            pipelineCacheUUID[2]: uint8_t = 78
            pipelineCacheUUID[3]: uint8_t = 210
            pipelineCacheUUID[4]: uint8_t = 4
            pipelineCacheUUID[5]: uint8_t = 0
            pipelineCacheUUID[6]: uint8_t = 7
            pipelineCacheUUID[7]: uint8_t = 210
            pipelineCacheUUID[8]: uint8_t = 0
            pipelineCacheUUID[9]: uint8_t = 0
            pipelineCacheUUID[10]: uint8_t = 0
            pipelineCacheUUID[11]: uint8_t = 0
            pipelineCacheUUID[12]: uint8_t = 0
            pipelineCacheUUID[13]: uint8_t = 0
            pipelineCacheUUID[14]: uint8_t = 0
            pipelineCacheUUID[15]: uint8_t = 0
        limits: VkPhysicalDeviceLimits = 0x6180000215a8:
            maxImageDimension1D: uint32_t = 16384
            maxImageDimension2D: uint32_t = 16384
            maxImageDimension3D: uint32_t = 2048
            maxImageDimensionCube: uint32_t = 16384
            maxImageArrayLayers: uint32_t = 2048
            maxTexelBufferElements: uint32_t = 67108864
            maxUniformBufferRange: uint32_t = 65536
            maxStorageBufferRange: uint32_t = 2147483648
            maxPushConstantsSize: uint32_t = 4096
            maxMemoryAllocationCount: uint32_t = 1073741824
            maxSamplerAllocationCount: uint32_t = 2048
            bufferImageGranularity: VkDeviceSize = 256
            sparseAddressSpaceSize: VkDeviceSize = 0
            maxBoundDescriptorSets: uint32_t = 8
            maxPerStageDescriptorSamplers: uint32_t = 16
            maxPerStageDescriptorUniformBuffers: uint32_t = 31
            maxPerStageDescriptorStorageBuffers: uint32_t = 31
            maxPerStageDescriptorSampledImages: uint32_t = 128
            maxPerStageDescriptorStorageImages: uint32_t = 8
            maxPerStageDescriptorInputAttachments: uint32_t = 128
            maxPerStageResources: uint32_t = 159
            maxDescriptorSetSamplers: uint32_t = 80
            maxDescriptorSetUniformBuffers: uint32_t = 155
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
            maxDescriptorSetStorageBuffers: uint32_t = 155
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
            maxDescriptorSetSampledImages: uint32_t = 640
            maxDescriptorSetStorageImages: uint32_t = 40
            maxDescriptorSetInputAttachments: uint32_t = 640
            maxVertexInputAttributes: uint32_t = 31
            maxVertexInputBindings: uint32_t = 31
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 2048
            maxVertexOutputComponents: uint32_t = 124
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 124
            maxTessellationControlPerVertexOutputComponents: uint32_t = 124
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4088
            maxTessellationEvaluationInputComponents: uint32_t = 124
            maxTessellationEvaluationOutputComponents: uint32_t = 124
            maxGeometryShaderInvocations: uint32_t = 0
            maxGeometryInputComponents: uint32_t = 0
            maxGeometryOutputComponents: uint32_t = 0
            maxGeometryOutputVertices: uint32_t = 0
            maxGeometryTotalOutputComponents: uint32_t = 0
            maxFragmentInputComponents: uint32_t = 124
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 159
            maxComputeSharedMemorySize: uint32_t = 65536
            maxComputeWorkGroupCount: uint32_t[3] = 0x618000021684
                maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                maxComputeWorkGroupCount[2]: uint32_t = 1073741824
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 0x618000021694
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 1024
            subPixelPrecisionBits: uint32_t = 4
            subTexelPrecisionBits: uint32_t = 4
            mipmapPrecisionBits: uint32_t = 4
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount: uint32_t = 1073741824
            maxSamplerLodBias: float = 0
            maxSamplerAnisotropy: float = 16
            maxViewports: uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 0x6180000216c0
                maxViewportDimensions[0]: uint32_t = 16384
                maxViewportDimensions[1]: uint32_t = 16384
            viewportBoundsRange: float[2] = 0x6180000216c8
                viewportBoundsRange[0]: float = -32768
                viewportBoundsRange[1]: float = 32767
            viewportSubPixelBits: uint32_t = 0
            minMemoryMapAlignment: size_t = 256
            minTexelBufferOffsetAlignment: VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset: int32_t = -8
            maxTexelOffset: uint32_t = 7
            minTexelGatherOffset: int32_t = -8
            maxTexelGatherOffset: uint32_t = 7
            minInterpolationOffset: float = -0.5
            maxInterpolationOffset: float = 0.5
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth: uint32_t = 16384
            maxFramebufferHeight: uint32_t = 16384
            maxFramebufferLayers: uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxColorAttachments: uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
            maxSampleMaskWords: uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod: float = 1
            maxClipDistances: uint32_t = 1073741824
            maxCullDistances: uint32_t = 0
            maxCombinedClipAndCullDistances: uint32_t = 1073741824
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange: float[2] = 0x618000021764
                pointSizeRange[0]: float = 1
                pointSizeRange[1]: float = 64
            lineWidthRange: float[2] = 0x61800002176c
                lineWidthRange[0]: float = 1
                lineWidthRange[1]: float = 1
            pointSizeGranularity: float = 1
            lineWidthGranularity: float = 1
            strictLines: VkBool32 = 1
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize: VkDeviceSize = 256
        sparseProperties: VkPhysicalDeviceSparseProperties = 0x6180000217a0:
            residencyStandard2DBlockShape: VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape: VkBool32 = 0
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pFeatures: VkPhysicalDeviceFeatures* = 0x61c00001d0a0:
        robustBufferAccess: VkBool32 = 1
        fullDrawIndexUint32: VkBool32 = 1
        imageCubeArray: VkBool32 = 1
        independentBlend: VkBool32 = 1
        geometryShader: VkBool32 = 0
        tessellationShader: VkBool32 = 1
        sampleRateShading: VkBool32 = 1
        dualSrcBlend: VkBool32 = 1
        logicOp: VkBool32 = 0
        multiDrawIndirect: VkBool32 = 1
        drawIndirectFirstInstance: VkBool32 = 1
        depthClamp: VkBool32 = 1
        depthBiasClamp: VkBool32 = 1
        fillModeNonSolid: VkBool32 = 1
        depthBounds: VkBool32 = 0
        wideLines: VkBool32 = 0
        largePoints: VkBool32 = 1
        alphaToOne: VkBool32 = 1
        multiViewport: VkBool32 = 1
        samplerAnisotropy: VkBool32 = 1
        textureCompressionETC2: VkBool32 = 0
        textureCompressionASTC_LDR: VkBool32 = 0
        textureCompressionBC: VkBool32 = 1
        occlusionQueryPrecise: VkBool32 = 1
        pipelineStatisticsQuery: VkBool32 = 0
        vertexPipelineStoresAndAtomics: VkBool32 = 1
        fragmentStoresAndAtomics: VkBool32 = 1
        shaderTessellationAndGeometryPointSize: VkBool32 = 1
        shaderImageGatherExtended: VkBool32 = 1
        shaderStorageImageExtendedFormats: VkBool32 = 1
        shaderStorageImageMultisample: VkBool32 = 0
        shaderStorageImageReadWithoutFormat: VkBool32 = 1
        shaderStorageImageWriteWithoutFormat: VkBool32 = 1
        shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
        shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
        shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
        shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
        shaderClipDistance: VkBool32 = 1
        shaderCullDistance: VkBool32 = 0
        shaderFloat64: VkBool32 = 0
        shaderInt64: VkBool32 = 0
        shaderInt16: VkBool32 = 1
        shaderResourceResidency: VkBool32 = 0
        shaderResourceMinLod: VkBool32 = 1
        sparseBinding: VkBool32 = 0
        sparseResidencyBuffer: VkBool32 = 0
        sparseResidencyImage2D: VkBool32 = 0
        sparseResidencyImage3D: VkBool32 = 0
        sparseResidency2Samples: VkBool32 = 0
        sparseResidency4Samples: VkBool32 = 0
        sparseResidency8Samples: VkBool32 = 0
        sparseResidency16Samples: VkBool32 = 0
        sparseResidencyAliased: VkBool32 = 0
        variableMultisampleRate: VkBool32 = 0
        inheritedQueries: VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance: VkInstance = 0x62900005a200
    pPhysicalDeviceCount: uint32_t* = 1
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance: VkInstance = 0x62900005a200
    pPhysicalDeviceCount: uint32_t* = 1
    pPhysicalDevices: VkPhysicalDevice* = 0x7ffedffd9bf0
        pPhysicalDevices[0]: VkPhysicalDevice = 0x60300017bae0

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pFeatures: VkPhysicalDeviceFeatures* = 0x61c00001d0a0:
        robustBufferAccess: VkBool32 = 1
        fullDrawIndexUint32: VkBool32 = 1
        imageCubeArray: VkBool32 = 1
        independentBlend: VkBool32 = 1
        geometryShader: VkBool32 = 0
        tessellationShader: VkBool32 = 1
        sampleRateShading: VkBool32 = 1
        dualSrcBlend: VkBool32 = 1
        logicOp: VkBool32 = 0
        multiDrawIndirect: VkBool32 = 1
        drawIndirectFirstInstance: VkBool32 = 1
        depthClamp: VkBool32 = 1
        depthBiasClamp: VkBool32 = 1
        fillModeNonSolid: VkBool32 = 1
        depthBounds: VkBool32 = 0
        wideLines: VkBool32 = 0
        largePoints: VkBool32 = 1
        alphaToOne: VkBool32 = 1
        multiViewport: VkBool32 = 1
        samplerAnisotropy: VkBool32 = 1
        textureCompressionETC2: VkBool32 = 0
        textureCompressionASTC_LDR: VkBool32 = 0
        textureCompressionBC: VkBool32 = 1
        occlusionQueryPrecise: VkBool32 = 1
        pipelineStatisticsQuery: VkBool32 = 0
        vertexPipelineStoresAndAtomics: VkBool32 = 1
        fragmentStoresAndAtomics: VkBool32 = 1
        shaderTessellationAndGeometryPointSize: VkBool32 = 1
        shaderImageGatherExtended: VkBool32 = 1
        shaderStorageImageExtendedFormats: VkBool32 = 1
        shaderStorageImageMultisample: VkBool32 = 0
        shaderStorageImageReadWithoutFormat: VkBool32 = 1
        shaderStorageImageWriteWithoutFormat: VkBool32 = 1
        shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
        shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
        shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
        shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
        shaderClipDistance: VkBool32 = 1
        shaderCullDistance: VkBool32 = 0
        shaderFloat64: VkBool32 = 0
        shaderInt64: VkBool32 = 0
        shaderInt16: VkBool32 = 1
        shaderResourceResidency: VkBool32 = 0
        shaderResourceMinLod: VkBool32 = 1
        sparseBinding: VkBool32 = 0
        sparseResidencyBuffer: VkBool32 = 0
        sparseResidencyImage2D: VkBool32 = 0
        sparseResidencyImage3D: VkBool32 = 0
        sparseResidency2Samples: VkBool32 = 0
        sparseResidency4Samples: VkBool32 = 0
        sparseResidency8Samples: VkBool32 = 0
        sparseResidency16Samples: VkBool32 = 0
        sparseResidencyAliased: VkBool32 = 0
        variableMultisampleRate: VkBool32 = 0
        inheritedQueries: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties2* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties2* = 0x60e00003ba00
        pQueueFamilyProperties[0]: VkQueueFamilyProperties2 = 0x60e00003ba00:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003ba10:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003ba1c:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[1]: VkQueueFamilyProperties2 = 0x60e00003ba28:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003ba38:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003ba44:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[2]: VkQueueFamilyProperties2 = 0x60e00003ba50:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003ba60:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003ba6c:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[3]: VkQueueFamilyProperties2 = 0x60e00003ba78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003ba88:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003ba94:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 0
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 1
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 2
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 3
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pSurfaceInfo: const VkPhysicalDeviceSurfaceInfo2KHR* = 0x7ffedffd9600:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (1000119000)
        pNext: const void* = NULL
        surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceCapabilities: VkSurfaceCapabilities2KHR* = 0x7ffedffd9920:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR (1000119001)
        pNext: void* = NULL
        surfaceCapabilities: VkSurfaceCapabilitiesKHR = 0x7ffedffd9930:
            minImageCount: uint32_t = 2
            maxImageCount: uint32_t = 3
            currentExtent: VkExtent2D = 0x7ffedffd9938:
                width: uint32_t = 2560
                height: uint32_t = 1440
            minImageExtent: VkExtent2D = 0x7ffedffd9940:
                width: uint32_t = 1
                height: uint32_t = 1
            maxImageExtent: VkExtent2D = 0x7ffedffd9948:
                width: uint32_t = 16384
                height: uint32_t = 16384
            maxImageArrayLayers: uint32_t = 1
            supportedTransforms: VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
            currentTransform: VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
            supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = 13 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR | VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR)
            supportedUsageFlags: VkImageUsageFlags = 31 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pSurfaceInfo: const VkPhysicalDeviceSurfaceInfo2KHR* = 0x7ffedffd95e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (1000119000)
        pNext: const void* = NULL
        surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceFormatCount: uint32_t* = 5
    pSurfaceFormats: VkSurfaceFormat2KHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pSurfaceInfo: const VkPhysicalDeviceSurfaceInfo2KHR* = 0x7ffedffd95e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (1000119000)
        pNext: const void* = NULL
        surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceFormatCount: uint32_t* = 5
    pSurfaceFormats: VkSurfaceFormat2KHR* = 0x60c0000622c0
        pSurfaceFormats[0]: VkSurfaceFormat2KHR = 0x60c0000622c0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c0000622d0:
                format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]: VkSurfaceFormat2KHR = 0x60c0000622d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c0000622e8:
                format: VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]: VkSurfaceFormat2KHR = 0x60c0000622f0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c000062300:
                format: VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]: VkSurfaceFormat2KHR = 0x60c000062308:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c000062318:
                format: VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]: VkSurfaceFormat2KHR = 0x60c000062320:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c000062330:
                format: VkFormat = VK_FORMAT_A2R10G10B10_UNORM_PACK32 (58)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    surface: VkSurfaceKHR = 0x60700003f870
    pPresentModeCount: uint32_t* = 2
    pPresentModes: VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    surface: VkSurfaceKHR = 0x60700003f870
    pPresentModeCount: uint32_t* = 2
    pPresentModes: VkPresentModeKHR* = 0x6020000308f0
        pPresentModes[0]: VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]: VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pFeatures: VkPhysicalDeviceFeatures2* = 0x7ffedffd99b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext: void* = NULL
        features: VkPhysicalDeviceFeatures = 0x7ffedffd99c0:
            robustBufferAccess: VkBool32 = 1
            fullDrawIndexUint32: VkBool32 = 1
            imageCubeArray: VkBool32 = 1
            independentBlend: VkBool32 = 1
            geometryShader: VkBool32 = 0
            tessellationShader: VkBool32 = 1
            sampleRateShading: VkBool32 = 1
            dualSrcBlend: VkBool32 = 1
            logicOp: VkBool32 = 0
            multiDrawIndirect: VkBool32 = 1
            drawIndirectFirstInstance: VkBool32 = 1
            depthClamp: VkBool32 = 1
            depthBiasClamp: VkBool32 = 1
            fillModeNonSolid: VkBool32 = 1
            depthBounds: VkBool32 = 0
            wideLines: VkBool32 = 0
            largePoints: VkBool32 = 1
            alphaToOne: VkBool32 = 1
            multiViewport: VkBool32 = 1
            samplerAnisotropy: VkBool32 = 1
            textureCompressionETC2: VkBool32 = 0
            textureCompressionASTC_LDR: VkBool32 = 0
            textureCompressionBC: VkBool32 = 1
            occlusionQueryPrecise: VkBool32 = 1
            pipelineStatisticsQuery: VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics: VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended: VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample: VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 1
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance: VkBool32 = 1
            shaderCullDistance: VkBool32 = 0
            shaderFloat64: VkBool32 = 0
            shaderInt64: VkBool32 = 0
            shaderInt16: VkBool32 = 1
            shaderResourceResidency: VkBool32 = 0
            shaderResourceMinLod: VkBool32 = 1
            sparseBinding: VkBool32 = 0
            sparseResidencyBuffer: VkBool32 = 0
            sparseResidencyImage2D: VkBool32 = 0
            sparseResidencyImage3D: VkBool32 = 0
            sparseResidency2Samples: VkBool32 = 0
            sparseResidency4Samples: VkBool32 = 0
            sparseResidency8Samples: VkBool32 = 0
            sparseResidency16Samples: VkBool32 = 0
            sparseResidencyAliased: VkBool32 = 0
            variableMultisampleRate: VkBool32 = 0
            inheritedQueries: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pFeatures: VkPhysicalDeviceFeatures2* = 0x7ffedffdcd40:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext: void* = NULL
        features: VkPhysicalDeviceFeatures = 0x7ffedffdcd50:
            robustBufferAccess: VkBool32 = 1
            fullDrawIndexUint32: VkBool32 = 1
            imageCubeArray: VkBool32 = 1
            independentBlend: VkBool32 = 1
            geometryShader: VkBool32 = 0
            tessellationShader: VkBool32 = 1
            sampleRateShading: VkBool32 = 1
            dualSrcBlend: VkBool32 = 1
            logicOp: VkBool32 = 0
            multiDrawIndirect: VkBool32 = 1
            drawIndirectFirstInstance: VkBool32 = 1
            depthClamp: VkBool32 = 1
            depthBiasClamp: VkBool32 = 1
            fillModeNonSolid: VkBool32 = 1
            depthBounds: VkBool32 = 0
            wideLines: VkBool32 = 0
            largePoints: VkBool32 = 1
            alphaToOne: VkBool32 = 1
            multiViewport: VkBool32 = 1
            samplerAnisotropy: VkBool32 = 1
            textureCompressionETC2: VkBool32 = 0
            textureCompressionASTC_LDR: VkBool32 = 0
            textureCompressionBC: VkBool32 = 1
            occlusionQueryPrecise: VkBool32 = 1
            pipelineStatisticsQuery: VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics: VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended: VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample: VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 1
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance: VkBool32 = 1
            shaderCullDistance: VkBool32 = 0
            shaderFloat64: VkBool32 = 0
            shaderInt64: VkBool32 = 0
            shaderInt16: VkBool32 = 1
            shaderResourceResidency: VkBool32 = 0
            shaderResourceMinLod: VkBool32 = 1
            sparseBinding: VkBool32 = 0
            sparseResidencyBuffer: VkBool32 = 0
            sparseResidencyImage2D: VkBool32 = 0
            sparseResidencyImage3D: VkBool32 = 0
            sparseResidency2Samples: VkBool32 = 0
            sparseResidency4Samples: VkBool32 = 0
            sparseResidency8Samples: VkBool32 = 0
            sparseResidency16Samples: VkBool32 = 0
            sparseResidencyAliased: VkBool32 = 0
            variableMultisampleRate: VkBool32 = 0
            inheritedQueries: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties2* = 0x7ffedffdce30:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext: const void* = VkPhysicalDeviceDriverProperties
        properties: VkPhysicalDeviceProperties = 0x7ffedffdce40:
            apiVersion: uint32_t = 4198576
            driverVersion: uint32_t = 10103
            vendorID: uint32_t = 32902
            deviceID: uint32_t = 34752
            deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
            deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
            pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x7ffedffdcf54
                pipelineCacheUUID[0]: uint8_t = 85
                pipelineCacheUUID[1]: uint8_t = 221
                pipelineCacheUUID[2]: uint8_t = 78
                pipelineCacheUUID[3]: uint8_t = 210
                pipelineCacheUUID[4]: uint8_t = 4
                pipelineCacheUUID[5]: uint8_t = 0
                pipelineCacheUUID[6]: uint8_t = 7
                pipelineCacheUUID[7]: uint8_t = 210
                pipelineCacheUUID[8]: uint8_t = 0
                pipelineCacheUUID[9]: uint8_t = 0
                pipelineCacheUUID[10]: uint8_t = 0
                pipelineCacheUUID[11]: uint8_t = 0
                pipelineCacheUUID[12]: uint8_t = 0
                pipelineCacheUUID[13]: uint8_t = 0
                pipelineCacheUUID[14]: uint8_t = 0
                pipelineCacheUUID[15]: uint8_t = 0
            limits: VkPhysicalDeviceLimits = 0x7ffedffdcf68:
                maxImageDimension1D: uint32_t = 16384
                maxImageDimension2D: uint32_t = 16384
                maxImageDimension3D: uint32_t = 2048
                maxImageDimensionCube: uint32_t = 16384
                maxImageArrayLayers: uint32_t = 2048
                maxTexelBufferElements: uint32_t = 67108864
                maxUniformBufferRange: uint32_t = 65536
                maxStorageBufferRange: uint32_t = 2147483648
                maxPushConstantsSize: uint32_t = 4096
                maxMemoryAllocationCount: uint32_t = 1073741824
                maxSamplerAllocationCount: uint32_t = 2048
                bufferImageGranularity: VkDeviceSize = 256
                sparseAddressSpaceSize: VkDeviceSize = 0
                maxBoundDescriptorSets: uint32_t = 8
                maxPerStageDescriptorSamplers: uint32_t = 16
                maxPerStageDescriptorUniformBuffers: uint32_t = 31
                maxPerStageDescriptorStorageBuffers: uint32_t = 31
                maxPerStageDescriptorSampledImages: uint32_t = 128
                maxPerStageDescriptorStorageImages: uint32_t = 8
                maxPerStageDescriptorInputAttachments: uint32_t = 128
                maxPerStageResources: uint32_t = 159
                maxDescriptorSetSamplers: uint32_t = 80
                maxDescriptorSetUniformBuffers: uint32_t = 155
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
                maxDescriptorSetStorageBuffers: uint32_t = 155
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
                maxDescriptorSetSampledImages: uint32_t = 640
                maxDescriptorSetStorageImages: uint32_t = 40
                maxDescriptorSetInputAttachments: uint32_t = 640
                maxVertexInputAttributes: uint32_t = 31
                maxVertexInputBindings: uint32_t = 31
                maxVertexInputAttributeOffset: uint32_t = 2047
                maxVertexInputBindingStride: uint32_t = 2048
                maxVertexOutputComponents: uint32_t = 124
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize: uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 124
                maxTessellationControlPerVertexOutputComponents: uint32_t = 124
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4088
                maxTessellationEvaluationInputComponents: uint32_t = 124
                maxTessellationEvaluationOutputComponents: uint32_t = 124
                maxGeometryShaderInvocations: uint32_t = 0
                maxGeometryInputComponents: uint32_t = 0
                maxGeometryOutputComponents: uint32_t = 0
                maxGeometryOutputVertices: uint32_t = 0
                maxGeometryTotalOutputComponents: uint32_t = 0
                maxFragmentInputComponents: uint32_t = 124
                maxFragmentOutputAttachments: uint32_t = 8
                maxFragmentDualSrcAttachments: uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 159
                maxComputeSharedMemorySize: uint32_t = 65536
                maxComputeWorkGroupCount: uint32_t[3] = 0x7ffedffdd044
                    maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[2]: uint32_t = 1073741824
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize: uint32_t[3] = 0x7ffedffdd054
                    maxComputeWorkGroupSize[0]: uint32_t = 1024
                    maxComputeWorkGroupSize[1]: uint32_t = 1024
                    maxComputeWorkGroupSize[2]: uint32_t = 1024
                subPixelPrecisionBits: uint32_t = 4
                subTexelPrecisionBits: uint32_t = 4
                mipmapPrecisionBits: uint32_t = 4
                maxDrawIndexedIndexValue: uint32_t = 4294967295
                maxDrawIndirectCount: uint32_t = 1073741824
                maxSamplerLodBias: float = 0
                maxSamplerAnisotropy: float = 16
                maxViewports: uint32_t = 16
                maxViewportDimensions: uint32_t[2] = 0x7ffedffdd080
                    maxViewportDimensions[0]: uint32_t = 16384
                    maxViewportDimensions[1]: uint32_t = 16384
                viewportBoundsRange: float[2] = 0x7ffedffdd088
                    viewportBoundsRange[0]: float = -32768
                    viewportBoundsRange[1]: float = 32767
                viewportSubPixelBits: uint32_t = 0
                minMemoryMapAlignment: size_t = 256
                minTexelBufferOffsetAlignment: VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 256
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset: int32_t = -8
                maxTexelOffset: uint32_t = 7
                minTexelGatherOffset: int32_t = -8
                maxTexelGatherOffset: uint32_t = 7
                minInterpolationOffset: float = -0.5
                maxInterpolationOffset: float = 0.5
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth: uint32_t = 16384
                maxFramebufferHeight: uint32_t = 16384
                maxFramebufferLayers: uint32_t = 2048
                framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxColorAttachments: uint32_t = 8
                sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
                maxSampleMaskWords: uint32_t = 1
                timestampComputeAndGraphics: VkBool32 = 1
                timestampPeriod: float = 1
                maxClipDistances: uint32_t = 1073741824
                maxCullDistances: uint32_t = 0
                maxCombinedClipAndCullDistances: uint32_t = 1073741824
                discreteQueuePriorities: uint32_t = 2
                pointSizeRange: float[2] = 0x7ffedffdd124
                    pointSizeRange[0]: float = 1
                    pointSizeRange[1]: float = 64
                lineWidthRange: float[2] = 0x7ffedffdd12c
                    lineWidthRange[0]: float = 1
                    lineWidthRange[1]: float = 1
                pointSizeGranularity: float = 1
                lineWidthGranularity: float = 1
                strictLines: VkBool32 = 1
                standardSampleLocations: VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize: VkDeviceSize = 256
            sparseProperties: VkPhysicalDeviceSparseProperties = 0x7ffedffdd160:
                residencyStandard2DBlockShape: VkBool32 = 0
                residencyStandard2DMultisampleBlockShape: VkBool32 = 0
                residencyStandard3DBlockShape: VkBool32 = 0
                residencyAlignedMipSize: VkBool32 = 0
                residencyNonResidentStrict: VkBool32 = 0
        pNext: VkPhysicalDeviceDriverProperties = 0x7ffedffdd390:
            sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)
            pNext: void* = NULL
            driverID: VkDriverId = VK_DRIVER_ID_MOLTENVK (14)
            driverName: char[VK_MAX_DRIVER_NAME_SIZE] = "MoltenVK"
            driverInfo: char[VK_MAX_DRIVER_INFO_SIZE] = "1.1.3"
            conformanceVersion: VkConformanceVersion = 0x7ffedffdd5a4:
                major: uint8_t = 0
                minor: uint8_t = 0
                subminor: uint8_t = 0
                patch: uint8_t = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pMemoryProperties: VkPhysicalDeviceMemoryProperties2* = 0x7ffedffdd178:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 (1000059006)
        pNext: void* = NULL
        memoryProperties: VkPhysicalDeviceMemoryProperties = 0x7ffedffdd188:
            memoryTypeCount: uint32_t = 3
            memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x7ffedffdd18c
                memoryTypes[0]: VkMemoryType = 0x7ffedffdd18c:
                    propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                    heapIndex: uint32_t = 0
                memoryTypes[1]: VkMemoryType = 0x7ffedffdd194:
                    propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                    heapIndex: uint32_t = 0
                memoryTypes[2]: VkMemoryType = 0x7ffedffdd19c:
                    propertyFlags: VkMemoryPropertyFlags = 11 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                    heapIndex: uint32_t = 0
            memoryHeapCount: uint32_t = 1
            memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x7ffedffdd290
                memoryHeaps[0]: VkMemoryHeap = 0x7ffedffdd290:
                    size: VkDeviceSize = 8589934592
                    flags: VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties2* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties2* = 0x60e00003bae0
        pQueueFamilyProperties[0]: VkQueueFamilyProperties2 = 0x60e00003bae0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003baf0:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bafc:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[1]: VkQueueFamilyProperties2 = 0x60e00003bb08:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bb18:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bb24:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[2]: VkQueueFamilyProperties2 = 0x60e00003bb30:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bb40:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bb4c:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[3]: VkQueueFamilyProperties2 = 0x60e00003bb58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bb68:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bb74:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 0
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 1
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 2
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    queueFamilyIndex: uint32_t = 3
    surface: VkSurfaceKHR = 0x60700003f870
    pSupported: VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties2* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties2* = 0x60e00003bbc0
        pQueueFamilyProperties[0]: VkQueueFamilyProperties2 = 0x60e00003bbc0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bbd0:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bbdc:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[1]: VkQueueFamilyProperties2 = 0x60e00003bbe8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bbf8:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bc04:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[2]: VkQueueFamilyProperties2 = 0x60e00003bc10:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bc20:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bc2c:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1
        pQueueFamilyProperties[3]: VkQueueFamilyProperties2 = 0x60e00003bc38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (1000059005)
            pNext: void* = NULL
            queueFamilyProperties: VkQueueFamilyProperties = 0x60e00003bc48:
                queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
                queueCount: uint32_t = 1
                timestampValidBits: uint32_t = 64
                minImageTransferGranularity: VkExtent3D = 0x60e00003bc54:
                    width: uint32_t = 1
                    height: uint32_t = 1
                    depth: uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties* = 0x7ffedffdab48:
        apiVersion: uint32_t = 4198576
        driverVersion: uint32_t = 10103
        vendorID: uint32_t = 32902
        deviceID: uint32_t = 34752
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x7ffedffdac5c
            pipelineCacheUUID[0]: uint8_t = 85
            pipelineCacheUUID[1]: uint8_t = 221
            pipelineCacheUUID[2]: uint8_t = 78
            pipelineCacheUUID[3]: uint8_t = 210
            pipelineCacheUUID[4]: uint8_t = 4
            pipelineCacheUUID[5]: uint8_t = 0
            pipelineCacheUUID[6]: uint8_t = 7
            pipelineCacheUUID[7]: uint8_t = 210
            pipelineCacheUUID[8]: uint8_t = 0
            pipelineCacheUUID[9]: uint8_t = 0
            pipelineCacheUUID[10]: uint8_t = 0
            pipelineCacheUUID[11]: uint8_t = 0
            pipelineCacheUUID[12]: uint8_t = 0
            pipelineCacheUUID[13]: uint8_t = 0
            pipelineCacheUUID[14]: uint8_t = 0
            pipelineCacheUUID[15]: uint8_t = 0
        limits: VkPhysicalDeviceLimits = 0x7ffedffdac70:
            maxImageDimension1D: uint32_t = 16384
            maxImageDimension2D: uint32_t = 16384
            maxImageDimension3D: uint32_t = 2048
            maxImageDimensionCube: uint32_t = 16384
            maxImageArrayLayers: uint32_t = 2048
            maxTexelBufferElements: uint32_t = 67108864
            maxUniformBufferRange: uint32_t = 65536
            maxStorageBufferRange: uint32_t = 2147483648
            maxPushConstantsSize: uint32_t = 4096
            maxMemoryAllocationCount: uint32_t = 1073741824
            maxSamplerAllocationCount: uint32_t = 2048
            bufferImageGranularity: VkDeviceSize = 256
            sparseAddressSpaceSize: VkDeviceSize = 0
            maxBoundDescriptorSets: uint32_t = 8
            maxPerStageDescriptorSamplers: uint32_t = 16
            maxPerStageDescriptorUniformBuffers: uint32_t = 31
            maxPerStageDescriptorStorageBuffers: uint32_t = 31
            maxPerStageDescriptorSampledImages: uint32_t = 128
            maxPerStageDescriptorStorageImages: uint32_t = 8
            maxPerStageDescriptorInputAttachments: uint32_t = 128
            maxPerStageResources: uint32_t = 159
            maxDescriptorSetSamplers: uint32_t = 80
            maxDescriptorSetUniformBuffers: uint32_t = 155
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
            maxDescriptorSetStorageBuffers: uint32_t = 155
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
            maxDescriptorSetSampledImages: uint32_t = 640
            maxDescriptorSetStorageImages: uint32_t = 40
            maxDescriptorSetInputAttachments: uint32_t = 640
            maxVertexInputAttributes: uint32_t = 31
            maxVertexInputBindings: uint32_t = 31
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 2048
            maxVertexOutputComponents: uint32_t = 124
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 124
            maxTessellationControlPerVertexOutputComponents: uint32_t = 124
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4088
            maxTessellationEvaluationInputComponents: uint32_t = 124
            maxTessellationEvaluationOutputComponents: uint32_t = 124
            maxGeometryShaderInvocations: uint32_t = 0
            maxGeometryInputComponents: uint32_t = 0
            maxGeometryOutputComponents: uint32_t = 0
            maxGeometryOutputVertices: uint32_t = 0
            maxGeometryTotalOutputComponents: uint32_t = 0
            maxFragmentInputComponents: uint32_t = 124
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 159
            maxComputeSharedMemorySize: uint32_t = 65536
            maxComputeWorkGroupCount: uint32_t[3] = 0x7ffedffdad4c
                maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                maxComputeWorkGroupCount[2]: uint32_t = 1073741824
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 0x7ffedffdad5c
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 1024
            subPixelPrecisionBits: uint32_t = 4
            subTexelPrecisionBits: uint32_t = 4
            mipmapPrecisionBits: uint32_t = 4
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount: uint32_t = 1073741824
            maxSamplerLodBias: float = 0
            maxSamplerAnisotropy: float = 16
            maxViewports: uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 0x7ffedffdad88
                maxViewportDimensions[0]: uint32_t = 16384
                maxViewportDimensions[1]: uint32_t = 16384
            viewportBoundsRange: float[2] = 0x7ffedffdad90
                viewportBoundsRange[0]: float = -32768
                viewportBoundsRange[1]: float = 32767
            viewportSubPixelBits: uint32_t = 0
            minMemoryMapAlignment: size_t = 256
            minTexelBufferOffsetAlignment: VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset: int32_t = -8
            maxTexelOffset: uint32_t = 7
            minTexelGatherOffset: int32_t = -8
            maxTexelGatherOffset: uint32_t = 7
            minInterpolationOffset: float = -0.5
            maxInterpolationOffset: float = 0.5
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth: uint32_t = 16384
            maxFramebufferHeight: uint32_t = 16384
            maxFramebufferLayers: uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxColorAttachments: uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
            maxSampleMaskWords: uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod: float = 1
            maxClipDistances: uint32_t = 1073741824
            maxCullDistances: uint32_t = 0
            maxCombinedClipAndCullDistances: uint32_t = 1073741824
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange: float[2] = 0x7ffedffdae2c
                pointSizeRange[0]: float = 1
                pointSizeRange[1]: float = 64
            lineWidthRange: float[2] = 0x7ffedffdae34
                lineWidthRange[0]: float = 1
                lineWidthRange[1]: float = 1
            pointSizeGranularity: float = 1
            lineWidthGranularity: float = 1
            strictLines: VkBool32 = 1
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize: VkDeviceSize = 256
        sparseProperties: VkPhysicalDeviceSparseProperties = 0x7ffedffdae68:
            residencyStandard2DBlockShape: VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape: VkBool32 = 0
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 0

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pCreateInfo: const VkDeviceCreateInfo* = 0x7ffedffda988:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext: const void* = NULL
        flags: VkDeviceCreateFlags = 0
        queueCreateInfoCount: uint32_t = 1
        pQueueCreateInfos: const VkDeviceQueueCreateInfo* = 0x60400013a998
            pQueueCreateInfos[0]: const VkDeviceQueueCreateInfo = 0x60400013a998:
                sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext: const void* = NULL
                flags: VkDeviceQueueCreateFlags = 0
                queueFamilyIndex: uint32_t = 3
                queueCount: uint32_t = 1
                pQueuePriorities: const float* = 0x602000032d90
                    pQueuePriorities[0]: const float = 1
        enabledLayerCount: uint32_t = 2
        ppEnabledLayerNames: const char* const* = 0x602000032d70
            ppEnabledLayerNames[0]: const char* const = "VK_LAYER_KHRONOS_validation"
            ppEnabledLayerNames[1]: const char* const = "VK_LAYER_LUNARG_api_dump"
        enabledExtensionCount: uint32_t = 4
        ppEnabledExtensionNames: const char* const* = 0x6030001826b0
            ppEnabledExtensionNames[0]: const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]: const char* const = "VK_KHR_create_renderpass2"
            ppEnabledExtensionNames[2]: const char* const = "VK_KHR_driver_properties"
            ppEnabledExtensionNames[3]: const char* const = "VK_KHR_portability_subset"
        pEnabledFeatures: const VkPhysicalDeviceFeatures* = 0x61100004f640:
            robustBufferAccess: VkBool32 = 0
            fullDrawIndexUint32: VkBool32 = 0
            imageCubeArray: VkBool32 = 0
            independentBlend: VkBool32 = 0
            geometryShader: VkBool32 = 0
            tessellationShader: VkBool32 = 0
            sampleRateShading: VkBool32 = 1
            dualSrcBlend: VkBool32 = 0
            logicOp: VkBool32 = 0
            multiDrawIndirect: VkBool32 = 0
            drawIndirectFirstInstance: VkBool32 = 0
            depthClamp: VkBool32 = 0
            depthBiasClamp: VkBool32 = 0
            fillModeNonSolid: VkBool32 = 0
            depthBounds: VkBool32 = 0
            wideLines: VkBool32 = 0
            largePoints: VkBool32 = 0
            alphaToOne: VkBool32 = 0
            multiViewport: VkBool32 = 0
            samplerAnisotropy: VkBool32 = 1
            textureCompressionETC2: VkBool32 = 0
            textureCompressionASTC_LDR: VkBool32 = 0
            textureCompressionBC: VkBool32 = 0
            occlusionQueryPrecise: VkBool32 = 0
            pipelineStatisticsQuery: VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics: VkBool32 = 0
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended: VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample: VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance: VkBool32 = 0
            shaderCullDistance: VkBool32 = 0
            shaderFloat64: VkBool32 = 0
            shaderInt64: VkBool32 = 0
            shaderInt16: VkBool32 = 0
            shaderResourceResidency: VkBool32 = 0
            shaderResourceMinLod: VkBool32 = 0
            sparseBinding: VkBool32 = 0
            sparseResidencyBuffer: VkBool32 = 0
            sparseResidencyImage2D: VkBool32 = 0
            sparseResidencyImage3D: VkBool32 = 0
            sparseResidency2Samples: VkBool32 = 0
            sparseResidency4Samples: VkBool32 = 0
            sparseResidency8Samples: VkBool32 = 0
            sparseResidency16Samples: VkBool32 = 0
            sparseResidencyAliased: VkBool32 = 0
            variableMultisampleRate: VkBool32 = 0
            inheritedQueries: VkBool32 = 0
        pNext: const void* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pDevice: VkDevice* = 0x622000052918

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties* = 0x7ffedffda608:
        apiVersion: uint32_t = 4198576
        driverVersion: uint32_t = 10103
        vendorID: uint32_t = 32902
        deviceID: uint32_t = 34752
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x7ffedffda71c
            pipelineCacheUUID[0]: uint8_t = 85
            pipelineCacheUUID[1]: uint8_t = 221
            pipelineCacheUUID[2]: uint8_t = 78
            pipelineCacheUUID[3]: uint8_t = 210
            pipelineCacheUUID[4]: uint8_t = 4
            pipelineCacheUUID[5]: uint8_t = 0
            pipelineCacheUUID[6]: uint8_t = 7
            pipelineCacheUUID[7]: uint8_t = 210
            pipelineCacheUUID[8]: uint8_t = 0
            pipelineCacheUUID[9]: uint8_t = 0
            pipelineCacheUUID[10]: uint8_t = 0
            pipelineCacheUUID[11]: uint8_t = 0
            pipelineCacheUUID[12]: uint8_t = 0
            pipelineCacheUUID[13]: uint8_t = 0
            pipelineCacheUUID[14]: uint8_t = 0
            pipelineCacheUUID[15]: uint8_t = 0
        limits: VkPhysicalDeviceLimits = 0x7ffedffda730:
            maxImageDimension1D: uint32_t = 16384
            maxImageDimension2D: uint32_t = 16384
            maxImageDimension3D: uint32_t = 2048
            maxImageDimensionCube: uint32_t = 16384
            maxImageArrayLayers: uint32_t = 2048
            maxTexelBufferElements: uint32_t = 67108864
            maxUniformBufferRange: uint32_t = 65536
            maxStorageBufferRange: uint32_t = 2147483648
            maxPushConstantsSize: uint32_t = 4096
            maxMemoryAllocationCount: uint32_t = 1073741824
            maxSamplerAllocationCount: uint32_t = 2048
            bufferImageGranularity: VkDeviceSize = 256
            sparseAddressSpaceSize: VkDeviceSize = 0
            maxBoundDescriptorSets: uint32_t = 8
            maxPerStageDescriptorSamplers: uint32_t = 16
            maxPerStageDescriptorUniformBuffers: uint32_t = 31
            maxPerStageDescriptorStorageBuffers: uint32_t = 31
            maxPerStageDescriptorSampledImages: uint32_t = 128
            maxPerStageDescriptorStorageImages: uint32_t = 8
            maxPerStageDescriptorInputAttachments: uint32_t = 128
            maxPerStageResources: uint32_t = 159
            maxDescriptorSetSamplers: uint32_t = 80
            maxDescriptorSetUniformBuffers: uint32_t = 155
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
            maxDescriptorSetStorageBuffers: uint32_t = 155
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
            maxDescriptorSetSampledImages: uint32_t = 640
            maxDescriptorSetStorageImages: uint32_t = 40
            maxDescriptorSetInputAttachments: uint32_t = 640
            maxVertexInputAttributes: uint32_t = 31
            maxVertexInputBindings: uint32_t = 31
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 2048
            maxVertexOutputComponents: uint32_t = 124
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 124
            maxTessellationControlPerVertexOutputComponents: uint32_t = 124
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4088
            maxTessellationEvaluationInputComponents: uint32_t = 124
            maxTessellationEvaluationOutputComponents: uint32_t = 124
            maxGeometryShaderInvocations: uint32_t = 0
            maxGeometryInputComponents: uint32_t = 0
            maxGeometryOutputComponents: uint32_t = 0
            maxGeometryOutputVertices: uint32_t = 0
            maxGeometryTotalOutputComponents: uint32_t = 0
            maxFragmentInputComponents: uint32_t = 124
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 159
            maxComputeSharedMemorySize: uint32_t = 65536
            maxComputeWorkGroupCount: uint32_t[3] = 0x7ffedffda80c
                maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                maxComputeWorkGroupCount[2]: uint32_t = 1073741824
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 0x7ffedffda81c
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 1024
            subPixelPrecisionBits: uint32_t = 4
            subTexelPrecisionBits: uint32_t = 4
            mipmapPrecisionBits: uint32_t = 4
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount: uint32_t = 1073741824
            maxSamplerLodBias: float = 0
            maxSamplerAnisotropy: float = 16
            maxViewports: uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 0x7ffedffda848
                maxViewportDimensions[0]: uint32_t = 16384
                maxViewportDimensions[1]: uint32_t = 16384
            viewportBoundsRange: float[2] = 0x7ffedffda850
                viewportBoundsRange[0]: float = -32768
                viewportBoundsRange[1]: float = 32767
            viewportSubPixelBits: uint32_t = 0
            minMemoryMapAlignment: size_t = 256
            minTexelBufferOffsetAlignment: VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset: int32_t = -8
            maxTexelOffset: uint32_t = 7
            minTexelGatherOffset: int32_t = -8
            maxTexelGatherOffset: uint32_t = 7
            minInterpolationOffset: float = -0.5
            maxInterpolationOffset: float = 0.5
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth: uint32_t = 16384
            maxFramebufferHeight: uint32_t = 16384
            maxFramebufferLayers: uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxColorAttachments: uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
            maxSampleMaskWords: uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod: float = 1
            maxClipDistances: uint32_t = 1073741824
            maxCullDistances: uint32_t = 0
            maxCombinedClipAndCullDistances: uint32_t = 1073741824
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange: float[2] = 0x7ffedffda8ec
                pointSizeRange[0]: float = 1
                pointSizeRange[1]: float = 64
            lineWidthRange: float[2] = 0x7ffedffda8f4
                lineWidthRange[0]: float = 1
                lineWidthRange[1]: float = 1
            pointSizeGranularity: float = 1
            lineWidthGranularity: float = 1
            strictLines: VkBool32 = 1
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize: VkDeviceSize = 256
        sparseProperties: VkPhysicalDeviceSparseProperties = 0x7ffedffda928:
            residencyStandard2DBlockShape: VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape: VkBool32 = 0
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pQueueFamilyPropertyCount: uint32_t* = 4
    pQueueFamilyProperties: VkQueueFamilyProperties* = 0x60800003e220
        pQueueFamilyProperties[0]: VkQueueFamilyProperties = 0x60800003e220:
            queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
            queueCount: uint32_t = 1
            timestampValidBits: uint32_t = 64
            minImageTransferGranularity: VkExtent3D = 0x60800003e22c:
                width: uint32_t = 1
                height: uint32_t = 1
                depth: uint32_t = 1
        pQueueFamilyProperties[1]: VkQueueFamilyProperties = 0x60800003e238:
            queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
            queueCount: uint32_t = 1
            timestampValidBits: uint32_t = 64
            minImageTransferGranularity: VkExtent3D = 0x60800003e244:
                width: uint32_t = 1
                height: uint32_t = 1
                depth: uint32_t = 1
        pQueueFamilyProperties[2]: VkQueueFamilyProperties = 0x60800003e250:
            queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
            queueCount: uint32_t = 1
            timestampValidBits: uint32_t = 64
            minImageTransferGranularity: VkExtent3D = 0x60800003e25c:
                width: uint32_t = 1
                height: uint32_t = 1
                depth: uint32_t = 1
        pQueueFamilyProperties[3]: VkQueueFamilyProperties = 0x60800003e268:
            queueFlags: VkQueueFlags = 7 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)
            queueCount: uint32_t = 1
            timestampValidBits: uint32_t = 64
            minImageTransferGranularity: VkExtent3D = 0x60800003e274:
                width: uint32_t = 1
                height: uint32_t = 1
                depth: uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 0x6260000b0270:
        memoryTypeCount: uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 0x6260000b0274
            memoryTypes[0]: VkMemoryType = 0x6260000b0274:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex: uint32_t = 0
            memoryTypes[1]: VkMemoryType = 0x6260000b027c:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex: uint32_t = 0
            memoryTypes[2]: VkMemoryType = 0x6260000b0284:
                propertyFlags: VkMemoryPropertyFlags = 11 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex: uint32_t = 0
        memoryHeapCount: uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0x6260000b0378
            memoryHeaps[0]: VkMemoryHeap = 0x6260000b0378:
                size: VkDeviceSize = 8589934592
                flags: VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties* = 0x6260000b0478:
        apiVersion: uint32_t = 4198576
        driverVersion: uint32_t = 10103
        vendorID: uint32_t = 32902
        deviceID: uint32_t = 34752
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x6260000b058c
            pipelineCacheUUID[0]: uint8_t = 85
            pipelineCacheUUID[1]: uint8_t = 221
            pipelineCacheUUID[2]: uint8_t = 78
            pipelineCacheUUID[3]: uint8_t = 210
            pipelineCacheUUID[4]: uint8_t = 4
            pipelineCacheUUID[5]: uint8_t = 0
            pipelineCacheUUID[6]: uint8_t = 7
            pipelineCacheUUID[7]: uint8_t = 210
            pipelineCacheUUID[8]: uint8_t = 0
            pipelineCacheUUID[9]: uint8_t = 0
            pipelineCacheUUID[10]: uint8_t = 0
            pipelineCacheUUID[11]: uint8_t = 0
            pipelineCacheUUID[12]: uint8_t = 0
            pipelineCacheUUID[13]: uint8_t = 0
            pipelineCacheUUID[14]: uint8_t = 0
            pipelineCacheUUID[15]: uint8_t = 0
        limits: VkPhysicalDeviceLimits = 0x6260000b05a0:
            maxImageDimension1D: uint32_t = 16384
            maxImageDimension2D: uint32_t = 16384
            maxImageDimension3D: uint32_t = 2048
            maxImageDimensionCube: uint32_t = 16384
            maxImageArrayLayers: uint32_t = 2048
            maxTexelBufferElements: uint32_t = 67108864
            maxUniformBufferRange: uint32_t = 65536
            maxStorageBufferRange: uint32_t = 2147483648
            maxPushConstantsSize: uint32_t = 4096
            maxMemoryAllocationCount: uint32_t = 1073741824
            maxSamplerAllocationCount: uint32_t = 2048
            bufferImageGranularity: VkDeviceSize = 256
            sparseAddressSpaceSize: VkDeviceSize = 0
            maxBoundDescriptorSets: uint32_t = 8
            maxPerStageDescriptorSamplers: uint32_t = 16
            maxPerStageDescriptorUniformBuffers: uint32_t = 31
            maxPerStageDescriptorStorageBuffers: uint32_t = 31
            maxPerStageDescriptorSampledImages: uint32_t = 128
            maxPerStageDescriptorStorageImages: uint32_t = 8
            maxPerStageDescriptorInputAttachments: uint32_t = 128
            maxPerStageResources: uint32_t = 159
            maxDescriptorSetSamplers: uint32_t = 80
            maxDescriptorSetUniformBuffers: uint32_t = 155
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
            maxDescriptorSetStorageBuffers: uint32_t = 155
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
            maxDescriptorSetSampledImages: uint32_t = 640
            maxDescriptorSetStorageImages: uint32_t = 40
            maxDescriptorSetInputAttachments: uint32_t = 640
            maxVertexInputAttributes: uint32_t = 31
            maxVertexInputBindings: uint32_t = 31
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 2048
            maxVertexOutputComponents: uint32_t = 124
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 124
            maxTessellationControlPerVertexOutputComponents: uint32_t = 124
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4088
            maxTessellationEvaluationInputComponents: uint32_t = 124
            maxTessellationEvaluationOutputComponents: uint32_t = 124
            maxGeometryShaderInvocations: uint32_t = 0
            maxGeometryInputComponents: uint32_t = 0
            maxGeometryOutputComponents: uint32_t = 0
            maxGeometryOutputVertices: uint32_t = 0
            maxGeometryTotalOutputComponents: uint32_t = 0
            maxFragmentInputComponents: uint32_t = 124
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 159
            maxComputeSharedMemorySize: uint32_t = 65536
            maxComputeWorkGroupCount: uint32_t[3] = 0x6260000b067c
                maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                maxComputeWorkGroupCount[2]: uint32_t = 1073741824
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 0x6260000b068c
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 1024
            subPixelPrecisionBits: uint32_t = 4
            subTexelPrecisionBits: uint32_t = 4
            mipmapPrecisionBits: uint32_t = 4
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount: uint32_t = 1073741824
            maxSamplerLodBias: float = 0
            maxSamplerAnisotropy: float = 16
            maxViewports: uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 0x6260000b06b8
                maxViewportDimensions[0]: uint32_t = 16384
                maxViewportDimensions[1]: uint32_t = 16384
            viewportBoundsRange: float[2] = 0x6260000b06c0
                viewportBoundsRange[0]: float = -32768
                viewportBoundsRange[1]: float = 32767
            viewportSubPixelBits: uint32_t = 0
            minMemoryMapAlignment: size_t = 256
            minTexelBufferOffsetAlignment: VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset: int32_t = -8
            maxTexelOffset: uint32_t = 7
            minTexelGatherOffset: int32_t = -8
            maxTexelGatherOffset: uint32_t = 7
            minInterpolationOffset: float = -0.5
            maxInterpolationOffset: float = 0.5
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth: uint32_t = 16384
            maxFramebufferHeight: uint32_t = 16384
            maxFramebufferLayers: uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxColorAttachments: uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
            maxSampleMaskWords: uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod: float = 1
            maxClipDistances: uint32_t = 1073741824
            maxCullDistances: uint32_t = 0
            maxCombinedClipAndCullDistances: uint32_t = 1073741824
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange: float[2] = 0x6260000b075c
                pointSizeRange[0]: float = 1
                pointSizeRange[1]: float = 64
            lineWidthRange: float[2] = 0x6260000b0764
                lineWidthRange[0]: float = 1
                lineWidthRange[1]: float = 1
            pointSizeGranularity: float = 1
            lineWidthGranularity: float = 1
            strictLines: VkBool32 = 1
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize: VkDeviceSize = 256
        sparseProperties: VkPhysicalDeviceSparseProperties = 0x6260000b0798:
            residencyStandard2DBlockShape: VkBool32 = 0
            residencyStandard2DMultisampleBlockShape: VkBool32 = 0
            residencyStandard3DBlockShape: VkBool32 = 0
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties2* = 0x7ffedffda5c8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext: const void* = VkPhysicalDeviceMultiviewProperties
        properties: VkPhysicalDeviceProperties = 0x7ffedffda5d8:
            apiVersion: uint32_t = 4198576
            driverVersion: uint32_t = 10103
            vendorID: uint32_t = 32902
            deviceID: uint32_t = 34752
            deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
            deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
            pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x7ffedffda6ec
                pipelineCacheUUID[0]: uint8_t = 85
                pipelineCacheUUID[1]: uint8_t = 221
                pipelineCacheUUID[2]: uint8_t = 78
                pipelineCacheUUID[3]: uint8_t = 210
                pipelineCacheUUID[4]: uint8_t = 4
                pipelineCacheUUID[5]: uint8_t = 0
                pipelineCacheUUID[6]: uint8_t = 7
                pipelineCacheUUID[7]: uint8_t = 210
                pipelineCacheUUID[8]: uint8_t = 0
                pipelineCacheUUID[9]: uint8_t = 0
                pipelineCacheUUID[10]: uint8_t = 0
                pipelineCacheUUID[11]: uint8_t = 0
                pipelineCacheUUID[12]: uint8_t = 0
                pipelineCacheUUID[13]: uint8_t = 0
                pipelineCacheUUID[14]: uint8_t = 0
                pipelineCacheUUID[15]: uint8_t = 0
            limits: VkPhysicalDeviceLimits = 0x7ffedffda700:
                maxImageDimension1D: uint32_t = 16384
                maxImageDimension2D: uint32_t = 16384
                maxImageDimension3D: uint32_t = 2048
                maxImageDimensionCube: uint32_t = 16384
                maxImageArrayLayers: uint32_t = 2048
                maxTexelBufferElements: uint32_t = 67108864
                maxUniformBufferRange: uint32_t = 65536
                maxStorageBufferRange: uint32_t = 2147483648
                maxPushConstantsSize: uint32_t = 4096
                maxMemoryAllocationCount: uint32_t = 1073741824
                maxSamplerAllocationCount: uint32_t = 2048
                bufferImageGranularity: VkDeviceSize = 256
                sparseAddressSpaceSize: VkDeviceSize = 0
                maxBoundDescriptorSets: uint32_t = 8
                maxPerStageDescriptorSamplers: uint32_t = 16
                maxPerStageDescriptorUniformBuffers: uint32_t = 31
                maxPerStageDescriptorStorageBuffers: uint32_t = 31
                maxPerStageDescriptorSampledImages: uint32_t = 128
                maxPerStageDescriptorStorageImages: uint32_t = 8
                maxPerStageDescriptorInputAttachments: uint32_t = 128
                maxPerStageResources: uint32_t = 159
                maxDescriptorSetSamplers: uint32_t = 80
                maxDescriptorSetUniformBuffers: uint32_t = 155
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
                maxDescriptorSetStorageBuffers: uint32_t = 155
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
                maxDescriptorSetSampledImages: uint32_t = 640
                maxDescriptorSetStorageImages: uint32_t = 40
                maxDescriptorSetInputAttachments: uint32_t = 640
                maxVertexInputAttributes: uint32_t = 31
                maxVertexInputBindings: uint32_t = 31
                maxVertexInputAttributeOffset: uint32_t = 2047
                maxVertexInputBindingStride: uint32_t = 2048
                maxVertexOutputComponents: uint32_t = 124
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize: uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 124
                maxTessellationControlPerVertexOutputComponents: uint32_t = 124
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4088
                maxTessellationEvaluationInputComponents: uint32_t = 124
                maxTessellationEvaluationOutputComponents: uint32_t = 124
                maxGeometryShaderInvocations: uint32_t = 0
                maxGeometryInputComponents: uint32_t = 0
                maxGeometryOutputComponents: uint32_t = 0
                maxGeometryOutputVertices: uint32_t = 0
                maxGeometryTotalOutputComponents: uint32_t = 0
                maxFragmentInputComponents: uint32_t = 124
                maxFragmentOutputAttachments: uint32_t = 8
                maxFragmentDualSrcAttachments: uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 159
                maxComputeSharedMemorySize: uint32_t = 65536
                maxComputeWorkGroupCount: uint32_t[3] = 0x7ffedffda7dc
                    maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[2]: uint32_t = 1073741824
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize: uint32_t[3] = 0x7ffedffda7ec
                    maxComputeWorkGroupSize[0]: uint32_t = 1024
                    maxComputeWorkGroupSize[1]: uint32_t = 1024
                    maxComputeWorkGroupSize[2]: uint32_t = 1024
                subPixelPrecisionBits: uint32_t = 4
                subTexelPrecisionBits: uint32_t = 4
                mipmapPrecisionBits: uint32_t = 4
                maxDrawIndexedIndexValue: uint32_t = 4294967295
                maxDrawIndirectCount: uint32_t = 1073741824
                maxSamplerLodBias: float = 0
                maxSamplerAnisotropy: float = 16
                maxViewports: uint32_t = 16
                maxViewportDimensions: uint32_t[2] = 0x7ffedffda818
                    maxViewportDimensions[0]: uint32_t = 16384
                    maxViewportDimensions[1]: uint32_t = 16384
                viewportBoundsRange: float[2] = 0x7ffedffda820
                    viewportBoundsRange[0]: float = -32768
                    viewportBoundsRange[1]: float = 32767
                viewportSubPixelBits: uint32_t = 0
                minMemoryMapAlignment: size_t = 256
                minTexelBufferOffsetAlignment: VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 256
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset: int32_t = -8
                maxTexelOffset: uint32_t = 7
                minTexelGatherOffset: int32_t = -8
                maxTexelGatherOffset: uint32_t = 7
                minInterpolationOffset: float = -0.5
                maxInterpolationOffset: float = 0.5
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth: uint32_t = 16384
                maxFramebufferHeight: uint32_t = 16384
                maxFramebufferLayers: uint32_t = 2048
                framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxColorAttachments: uint32_t = 8
                sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
                maxSampleMaskWords: uint32_t = 1
                timestampComputeAndGraphics: VkBool32 = 1
                timestampPeriod: float = 1
                maxClipDistances: uint32_t = 1073741824
                maxCullDistances: uint32_t = 0
                maxCombinedClipAndCullDistances: uint32_t = 1073741824
                discreteQueuePriorities: uint32_t = 2
                pointSizeRange: float[2] = 0x7ffedffda8bc
                    pointSizeRange[0]: float = 1
                    pointSizeRange[1]: float = 64
                lineWidthRange: float[2] = 0x7ffedffda8c4
                    lineWidthRange[0]: float = 1
                    lineWidthRange[1]: float = 1
                pointSizeGranularity: float = 1
                lineWidthGranularity: float = 1
                strictLines: VkBool32 = 1
                standardSampleLocations: VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize: VkDeviceSize = 256
            sparseProperties: VkPhysicalDeviceSparseProperties = 0x7ffedffda8f8:
                residencyStandard2DBlockShape: VkBool32 = 0
                residencyStandard2DMultisampleBlockShape: VkBool32 = 0
                residencyStandard3DBlockShape: VkBool32 = 0
                residencyAlignedMipSize: VkBool32 = 0
                residencyNonResidentStrict: VkBool32 = 0
        pNext: VkPhysicalDeviceMultiviewProperties = 0x6260000b0dc8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES (1000053002)
            pNext: void* = NULL
            maxMultiviewViewCount: uint32_t = 32
            maxMultiviewInstanceIndex: uint32_t = 134217727

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties2* = 0x7ffedffda5c8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext: const void* = VkPhysicalDevicePortabilitySubsetPropertiesKHR
        properties: VkPhysicalDeviceProperties = 0x7ffedffda5d8:
            apiVersion: uint32_t = 4198576
            driverVersion: uint32_t = 10103
            vendorID: uint32_t = 32902
            deviceID: uint32_t = 34752
            deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
            deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
            pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x7ffedffda6ec
                pipelineCacheUUID[0]: uint8_t = 85
                pipelineCacheUUID[1]: uint8_t = 221
                pipelineCacheUUID[2]: uint8_t = 78
                pipelineCacheUUID[3]: uint8_t = 210
                pipelineCacheUUID[4]: uint8_t = 4
                pipelineCacheUUID[5]: uint8_t = 0
                pipelineCacheUUID[6]: uint8_t = 7
                pipelineCacheUUID[7]: uint8_t = 210
                pipelineCacheUUID[8]: uint8_t = 0
                pipelineCacheUUID[9]: uint8_t = 0
                pipelineCacheUUID[10]: uint8_t = 0
                pipelineCacheUUID[11]: uint8_t = 0
                pipelineCacheUUID[12]: uint8_t = 0
                pipelineCacheUUID[13]: uint8_t = 0
                pipelineCacheUUID[14]: uint8_t = 0
                pipelineCacheUUID[15]: uint8_t = 0
            limits: VkPhysicalDeviceLimits = 0x7ffedffda700:
                maxImageDimension1D: uint32_t = 16384
                maxImageDimension2D: uint32_t = 16384
                maxImageDimension3D: uint32_t = 2048
                maxImageDimensionCube: uint32_t = 16384
                maxImageArrayLayers: uint32_t = 2048
                maxTexelBufferElements: uint32_t = 67108864
                maxUniformBufferRange: uint32_t = 65536
                maxStorageBufferRange: uint32_t = 2147483648
                maxPushConstantsSize: uint32_t = 4096
                maxMemoryAllocationCount: uint32_t = 1073741824
                maxSamplerAllocationCount: uint32_t = 2048
                bufferImageGranularity: VkDeviceSize = 256
                sparseAddressSpaceSize: VkDeviceSize = 0
                maxBoundDescriptorSets: uint32_t = 8
                maxPerStageDescriptorSamplers: uint32_t = 16
                maxPerStageDescriptorUniformBuffers: uint32_t = 31
                maxPerStageDescriptorStorageBuffers: uint32_t = 31
                maxPerStageDescriptorSampledImages: uint32_t = 128
                maxPerStageDescriptorStorageImages: uint32_t = 8
                maxPerStageDescriptorInputAttachments: uint32_t = 128
                maxPerStageResources: uint32_t = 159
                maxDescriptorSetSamplers: uint32_t = 80
                maxDescriptorSetUniformBuffers: uint32_t = 155
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
                maxDescriptorSetStorageBuffers: uint32_t = 155
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
                maxDescriptorSetSampledImages: uint32_t = 640
                maxDescriptorSetStorageImages: uint32_t = 40
                maxDescriptorSetInputAttachments: uint32_t = 640
                maxVertexInputAttributes: uint32_t = 31
                maxVertexInputBindings: uint32_t = 31
                maxVertexInputAttributeOffset: uint32_t = 2047
                maxVertexInputBindingStride: uint32_t = 2048
                maxVertexOutputComponents: uint32_t = 124
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize: uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 124
                maxTessellationControlPerVertexOutputComponents: uint32_t = 124
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4088
                maxTessellationEvaluationInputComponents: uint32_t = 124
                maxTessellationEvaluationOutputComponents: uint32_t = 124
                maxGeometryShaderInvocations: uint32_t = 0
                maxGeometryInputComponents: uint32_t = 0
                maxGeometryOutputComponents: uint32_t = 0
                maxGeometryOutputVertices: uint32_t = 0
                maxGeometryTotalOutputComponents: uint32_t = 0
                maxFragmentInputComponents: uint32_t = 124
                maxFragmentOutputAttachments: uint32_t = 8
                maxFragmentDualSrcAttachments: uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 159
                maxComputeSharedMemorySize: uint32_t = 65536
                maxComputeWorkGroupCount: uint32_t[3] = 0x7ffedffda7dc
                    maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[2]: uint32_t = 1073741824
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize: uint32_t[3] = 0x7ffedffda7ec
                    maxComputeWorkGroupSize[0]: uint32_t = 1024
                    maxComputeWorkGroupSize[1]: uint32_t = 1024
                    maxComputeWorkGroupSize[2]: uint32_t = 1024
                subPixelPrecisionBits: uint32_t = 4
                subTexelPrecisionBits: uint32_t = 4
                mipmapPrecisionBits: uint32_t = 4
                maxDrawIndexedIndexValue: uint32_t = 4294967295
                maxDrawIndirectCount: uint32_t = 1073741824
                maxSamplerLodBias: float = 0
                maxSamplerAnisotropy: float = 16
                maxViewports: uint32_t = 16
                maxViewportDimensions: uint32_t[2] = 0x7ffedffda818
                    maxViewportDimensions[0]: uint32_t = 16384
                    maxViewportDimensions[1]: uint32_t = 16384
                viewportBoundsRange: float[2] = 0x7ffedffda820
                    viewportBoundsRange[0]: float = -32768
                    viewportBoundsRange[1]: float = 32767
                viewportSubPixelBits: uint32_t = 0
                minMemoryMapAlignment: size_t = 256
                minTexelBufferOffsetAlignment: VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 256
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset: int32_t = -8
                maxTexelOffset: uint32_t = 7
                minTexelGatherOffset: int32_t = -8
                maxTexelGatherOffset: uint32_t = 7
                minInterpolationOffset: float = -0.5
                maxInterpolationOffset: float = 0.5
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth: uint32_t = 16384
                maxFramebufferHeight: uint32_t = 16384
                maxFramebufferLayers: uint32_t = 2048
                framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxColorAttachments: uint32_t = 8
                sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
                maxSampleMaskWords: uint32_t = 1
                timestampComputeAndGraphics: VkBool32 = 1
                timestampPeriod: float = 1
                maxClipDistances: uint32_t = 1073741824
                maxCullDistances: uint32_t = 0
                maxCombinedClipAndCullDistances: uint32_t = 1073741824
                discreteQueuePriorities: uint32_t = 2
                pointSizeRange: float[2] = 0x7ffedffda8bc
                    pointSizeRange[0]: float = 1
                    pointSizeRange[1]: float = 64
                lineWidthRange: float[2] = 0x7ffedffda8c4
                    lineWidthRange[0]: float = 1
                    lineWidthRange[1]: float = 1
                pointSizeGranularity: float = 1
                lineWidthGranularity: float = 1
                strictLines: VkBool32 = 1
                standardSampleLocations: VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize: VkDeviceSize = 256
            sparseProperties: VkPhysicalDeviceSparseProperties = 0x7ffedffda8f8:
                residencyStandard2DBlockShape: VkBool32 = 0
                residencyStandard2DMultisampleBlockShape: VkBool32 = 0
                residencyStandard3DBlockShape: VkBool32 = 0
                residencyAlignedMipSize: VkBool32 = 0
                residencyNonResidentStrict: VkBool32 = 0
        pNext: VkPhysicalDevicePortabilitySubsetPropertiesKHR = 0x6260000b0de0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR (1000163001)
            pNext: void* = NULL
            minVertexInputBindingStrideAlignment: uint32_t = 4

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pProperties: VkPhysicalDeviceProperties2* = 0x7ffedffda5c8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext: const void* = VkPhysicalDeviceSubgroupProperties
        properties: VkPhysicalDeviceProperties = 0x7ffedffda5d8:
            apiVersion: uint32_t = 4198576
            driverVersion: uint32_t = 10103
            vendorID: uint32_t = 32902
            deviceID: uint32_t = 34752
            deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
            deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 617"
            pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 0x7ffedffda6ec
                pipelineCacheUUID[0]: uint8_t = 85
                pipelineCacheUUID[1]: uint8_t = 221
                pipelineCacheUUID[2]: uint8_t = 78
                pipelineCacheUUID[3]: uint8_t = 210
                pipelineCacheUUID[4]: uint8_t = 4
                pipelineCacheUUID[5]: uint8_t = 0
                pipelineCacheUUID[6]: uint8_t = 7
                pipelineCacheUUID[7]: uint8_t = 210
                pipelineCacheUUID[8]: uint8_t = 0
                pipelineCacheUUID[9]: uint8_t = 0
                pipelineCacheUUID[10]: uint8_t = 0
                pipelineCacheUUID[11]: uint8_t = 0
                pipelineCacheUUID[12]: uint8_t = 0
                pipelineCacheUUID[13]: uint8_t = 0
                pipelineCacheUUID[14]: uint8_t = 0
                pipelineCacheUUID[15]: uint8_t = 0
            limits: VkPhysicalDeviceLimits = 0x7ffedffda700:
                maxImageDimension1D: uint32_t = 16384
                maxImageDimension2D: uint32_t = 16384
                maxImageDimension3D: uint32_t = 2048
                maxImageDimensionCube: uint32_t = 16384
                maxImageArrayLayers: uint32_t = 2048
                maxTexelBufferElements: uint32_t = 67108864
                maxUniformBufferRange: uint32_t = 65536
                maxStorageBufferRange: uint32_t = 2147483648
                maxPushConstantsSize: uint32_t = 4096
                maxMemoryAllocationCount: uint32_t = 1073741824
                maxSamplerAllocationCount: uint32_t = 2048
                bufferImageGranularity: VkDeviceSize = 256
                sparseAddressSpaceSize: VkDeviceSize = 0
                maxBoundDescriptorSets: uint32_t = 8
                maxPerStageDescriptorSamplers: uint32_t = 16
                maxPerStageDescriptorUniformBuffers: uint32_t = 31
                maxPerStageDescriptorStorageBuffers: uint32_t = 31
                maxPerStageDescriptorSampledImages: uint32_t = 128
                maxPerStageDescriptorStorageImages: uint32_t = 8
                maxPerStageDescriptorInputAttachments: uint32_t = 128
                maxPerStageResources: uint32_t = 159
                maxDescriptorSetSamplers: uint32_t = 80
                maxDescriptorSetUniformBuffers: uint32_t = 155
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 155
                maxDescriptorSetStorageBuffers: uint32_t = 155
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 155
                maxDescriptorSetSampledImages: uint32_t = 640
                maxDescriptorSetStorageImages: uint32_t = 40
                maxDescriptorSetInputAttachments: uint32_t = 640
                maxVertexInputAttributes: uint32_t = 31
                maxVertexInputBindings: uint32_t = 31
                maxVertexInputAttributeOffset: uint32_t = 2047
                maxVertexInputBindingStride: uint32_t = 2048
                maxVertexOutputComponents: uint32_t = 124
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize: uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 124
                maxTessellationControlPerVertexOutputComponents: uint32_t = 124
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4088
                maxTessellationEvaluationInputComponents: uint32_t = 124
                maxTessellationEvaluationOutputComponents: uint32_t = 124
                maxGeometryShaderInvocations: uint32_t = 0
                maxGeometryInputComponents: uint32_t = 0
                maxGeometryOutputComponents: uint32_t = 0
                maxGeometryOutputVertices: uint32_t = 0
                maxGeometryTotalOutputComponents: uint32_t = 0
                maxFragmentInputComponents: uint32_t = 124
                maxFragmentOutputAttachments: uint32_t = 8
                maxFragmentDualSrcAttachments: uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 159
                maxComputeSharedMemorySize: uint32_t = 65536
                maxComputeWorkGroupCount: uint32_t[3] = 0x7ffedffda7dc
                    maxComputeWorkGroupCount[0]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[1]: uint32_t = 1073741824
                    maxComputeWorkGroupCount[2]: uint32_t = 1073741824
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize: uint32_t[3] = 0x7ffedffda7ec
                    maxComputeWorkGroupSize[0]: uint32_t = 1024
                    maxComputeWorkGroupSize[1]: uint32_t = 1024
                    maxComputeWorkGroupSize[2]: uint32_t = 1024
                subPixelPrecisionBits: uint32_t = 4
                subTexelPrecisionBits: uint32_t = 4
                mipmapPrecisionBits: uint32_t = 4
                maxDrawIndexedIndexValue: uint32_t = 4294967295
                maxDrawIndirectCount: uint32_t = 1073741824
                maxSamplerLodBias: float = 0
                maxSamplerAnisotropy: float = 16
                maxViewports: uint32_t = 16
                maxViewportDimensions: uint32_t[2] = 0x7ffedffda818
                    maxViewportDimensions[0]: uint32_t = 16384
                    maxViewportDimensions[1]: uint32_t = 16384
                viewportBoundsRange: float[2] = 0x7ffedffda820
                    viewportBoundsRange[0]: float = -32768
                    viewportBoundsRange[1]: float = 32767
                viewportSubPixelBits: uint32_t = 0
                minMemoryMapAlignment: size_t = 256
                minTexelBufferOffsetAlignment: VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 256
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset: int32_t = -8
                maxTexelOffset: uint32_t = 7
                minTexelGatherOffset: int32_t = -8
                maxTexelGatherOffset: uint32_t = 7
                minInterpolationOffset: float = -0.5
                maxInterpolationOffset: float = 0.5
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth: uint32_t = 16384
                maxFramebufferHeight: uint32_t = 16384
                maxFramebufferLayers: uint32_t = 2048
                framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxColorAttachments: uint32_t = 8
                sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                storageImageSampleCounts: VkSampleCountFlags = 1 (VK_SAMPLE_COUNT_1_BIT)
                maxSampleMaskWords: uint32_t = 1
                timestampComputeAndGraphics: VkBool32 = 1
                timestampPeriod: float = 1
                maxClipDistances: uint32_t = 1073741824
                maxCullDistances: uint32_t = 0
                maxCombinedClipAndCullDistances: uint32_t = 1073741824
                discreteQueuePriorities: uint32_t = 2
                pointSizeRange: float[2] = 0x7ffedffda8bc
                    pointSizeRange[0]: float = 1
                    pointSizeRange[1]: float = 64
                lineWidthRange: float[2] = 0x7ffedffda8c4
                    lineWidthRange[0]: float = 1
                    lineWidthRange[1]: float = 1
                pointSizeGranularity: float = 1
                lineWidthGranularity: float = 1
                strictLines: VkBool32 = 1
                standardSampleLocations: VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 256
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize: VkDeviceSize = 256
            sparseProperties: VkPhysicalDeviceSparseProperties = 0x7ffedffda8f8:
                residencyStandard2DBlockShape: VkBool32 = 0
                residencyStandard2DMultisampleBlockShape: VkBool32 = 0
                residencyStandard3DBlockShape: VkBool32 = 0
                residencyAlignedMipSize: VkBool32 = 0
                residencyNonResidentStrict: VkBool32 = 0
        pNext: VkPhysicalDeviceSubgroupProperties = 0x7ffedffda530:
            sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES (1000094000)
            pNext: void* = NULL
            subgroupSize: uint32_t = 32
            supportedStages: VkShaderStageFlags = 50 (VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_COMPUTE_BIT)
            supportedOperations: VkSubgroupFeatureFlags = 191 (VK_SUBGROUP_FEATURE_BASIC_BIT | VK_SUBGROUP_FEATURE_VOTE_BIT | VK_SUBGROUP_FEATURE_ARITHMETIC_BIT | VK_SUBGROUP_FEATURE_BALLOT_BIT | VK_SUBGROUP_FEATURE_SHUFFLE_BIT | VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT | VK_SUBGROUP_FEATURE_QUAD_BIT)
            quadOperationsInAllStages: VkBool32 = 1

Thread 0, Frame 0:
vkGetDeviceQueue2(device, pQueueInfo, pQueue) returns void:
    device: VkDevice = 0x622000052918
    pQueueInfo: const VkDeviceQueueInfo2* = 0x7ffedffdb690:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 (1000145003)
        pNext: const void* = NULL
        flags: VkDeviceQueueCreateFlags = 0
        queueFamilyIndex: uint32_t = 3
        queueIndex: uint32_t = 0
    pQueue: VkQueue* = 0x60c000062398

Thread 0, Frame 0:
vkGetDeviceQueue2(device, pQueueInfo, pQueue) returns void:
    device: VkDevice = 0x622000052918
    pQueueInfo: const VkDeviceQueueInfo2* = 0x7ffedffdb690:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 (1000145003)
        pNext: const void* = NULL
        flags: VkDeviceQueueCreateFlags = 0
        queueFamilyIndex: uint32_t = 3
        queueIndex: uint32_t = 0
    pQueue: VkQueue* = 0x60c000062398

Thread 0, Frame 0:
vkGetDeviceQueue2(device, pQueueInfo, pQueue) returns void:
    device: VkDevice = 0x622000052918
    pQueueInfo: const VkDeviceQueueInfo2* = 0x7ffedffdb690:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 (1000145003)
        pNext: const void* = NULL
        flags: VkDeviceQueueCreateFlags = 0
        queueFamilyIndex: uint32_t = 3
        queueIndex: uint32_t = 0
    pQueue: VkQueue* = 0x60c000062398

Thread 0, Frame 0:
vkGetDeviceQueue2(device, pQueueInfo, pQueue) returns void:
    device: VkDevice = 0x622000052918
    pQueueInfo: const VkDeviceQueueInfo2* = 0x7ffedffdb690:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 (1000145003)
        pNext: const void* = NULL
        flags: VkDeviceQueueCreateFlags = 0
        queueFamilyIndex: uint32_t = 3
        queueIndex: uint32_t = 0
    pQueue: VkQueue* = 0x60c000062398

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pSurfaceInfo: const VkPhysicalDeviceSurfaceInfo2KHR* = 0x7ffedffdb3a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (1000119000)
        pNext: const void* = NULL
        surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceCapabilities: VkSurfaceCapabilities2KHR* = 0x7ffedffdb6c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR (1000119001)
        pNext: void* = NULL
        surfaceCapabilities: VkSurfaceCapabilitiesKHR = 0x7ffedffdb6d0:
            minImageCount: uint32_t = 2
            maxImageCount: uint32_t = 3
            currentExtent: VkExtent2D = 0x7ffedffdb6d8:
                width: uint32_t = 2560
                height: uint32_t = 1440
            minImageExtent: VkExtent2D = 0x7ffedffdb6e0:
                width: uint32_t = 1
                height: uint32_t = 1
            maxImageExtent: VkExtent2D = 0x7ffedffdb6e8:
                width: uint32_t = 16384
                height: uint32_t = 16384
            maxImageArrayLayers: uint32_t = 1
            supportedTransforms: VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
            currentTransform: VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
            supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = 13 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR | VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR)
            supportedUsageFlags: VkImageUsageFlags = 31 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pSurfaceInfo: const VkPhysicalDeviceSurfaceInfo2KHR* = 0x7ffedffdb380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (1000119000)
        pNext: const void* = NULL
        surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceFormatCount: uint32_t* = 5
    pSurfaceFormats: VkSurfaceFormat2KHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    pSurfaceInfo: const VkPhysicalDeviceSurfaceInfo2KHR* = 0x7ffedffdb380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (1000119000)
        pNext: const void* = NULL
        surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceFormatCount: uint32_t* = 5
    pSurfaceFormats: VkSurfaceFormat2KHR* = 0x60c0000634c0
        pSurfaceFormats[0]: VkSurfaceFormat2KHR = 0x60c0000634c0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c0000634d0:
                format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]: VkSurfaceFormat2KHR = 0x60c0000634d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c0000634e8:
                format: VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]: VkSurfaceFormat2KHR = 0x60c0000634f0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c000063500:
                format: VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]: VkSurfaceFormat2KHR = 0x60c000063508:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c000063518:
                format: VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]: VkSurfaceFormat2KHR = 0x60c000063520:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (1000119002)
            pNext: void* = NULL
            surfaceFormat: VkSurfaceFormatKHR = 0x60c000063530:
                format: VkFormat = VK_FORMAT_A2R10G10B10_UNORM_PACK32 (58)
                colorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    surface: VkSurfaceKHR = 0x60700003f870
    pPresentModeCount: uint32_t* = 2
    pPresentModes: VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    surface: VkSurfaceKHR = 0x60700003f870
    pPresentModeCount: uint32_t* = 2
    pPresentModes: VkPresentModeKHR* = 0x602000041250
        pPresentModes[0]: VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]: VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    surface: VkSurfaceKHR = 0x60700003f870
    pSurfaceCapabilities: VkSurfaceCapabilitiesKHR* = 0x7ffedffdb070:
        minImageCount: uint32_t = 2
        maxImageCount: uint32_t = 3
        currentExtent: VkExtent2D = 0x7ffedffdb078:
            width: uint32_t = 2560
            height: uint32_t = 1440
        minImageExtent: VkExtent2D = 0x7ffedffdb080:
            width: uint32_t = 1
            height: uint32_t = 1
        maxImageExtent: VkExtent2D = 0x7ffedffdb088:
            width: uint32_t = 16384
            height: uint32_t = 16384
        maxImageArrayLayers: uint32_t = 1
        supportedTransforms: VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform: VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = 13 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR | VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR | VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR)
        supportedUsageFlags: VkImageUsageFlags = 31 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb180:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    type: VkImageType = VK_IMAGE_TYPE_2D (1)
    tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
    usage: VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    flags: VkImageCreateFlags = 0
    pImageFormatProperties: VkImageFormatProperties* = 0x7ffedffdb180:
        maxExtent: VkExtent3D = 0x7ffedffdb180:
            width: uint32_t = 16384
            height: uint32_t = 16384
            depth: uint32_t = 1
        maxMipLevels: uint32_t = 15
        maxArrayLayers: uint32_t = 2048
        sampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
        maxResourceSize: VkDeviceSize = 4611686018427387904

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkSwapchainCreateInfoKHR* = 0x60b0000599b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext: const void* = NULL
        flags: VkSwapchainCreateFlagsKHR = 0
        surface: VkSurfaceKHR = 0x60700003f870
        minImageCount: uint32_t = 3
        imageFormat: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        imageColorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent: VkExtent2D = 0x60b0000599dc:
            width: uint32_t = 2560
            height: uint32_t = 1440
        imageArrayLayers: uint32_t = 1
        imageUsage: VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        preTransform: VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha: VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode: VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        clipped: VkBool32 = 1
        oldSwapchain: VkSwapchainKHR = 0x0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSwapchain: VkSwapchainKHR* = 0x61e000052880

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    pSwapchainImageCount: uint32_t* = 3
    pSwapchainImages: VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    pSwapchainImageCount: uint32_t* = 3
    pSwapchainImages: VkImage* = 0x603000190c30
        pSwapchainImages[0]: VkImage = 0x615000034600
        pSwapchainImages[1]: VkImage = 0x615000034880
        pSwapchainImages[2]: VkImage = 0x615000034b00

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb3e0:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb3e0:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb3e0:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb300:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageViewCreateInfo* = 0x7ffedffdb550:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext: const void* = NULL
        flags: VkImageViewCreateFlags = 0
        image: VkImage = 0x615000034600
        viewType: VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components: VkComponentMapping = 0x7ffedffdb578:
            r: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 0x7ffedffdb588:
            aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel: uint32_t = 0
            levelCount: uint32_t = 1
            baseArrayLayer: uint32_t = 0
            layerCount: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView: VkImageView* = 0x610000017b40

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb510:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb300:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageViewCreateInfo* = 0x7ffedffdb550:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext: const void* = NULL
        flags: VkImageViewCreateFlags = 0
        image: VkImage = 0x615000034880
        viewType: VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components: VkComponentMapping = 0x7ffedffdb578:
            r: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 0x7ffedffdb588:
            aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel: uint32_t = 0
            levelCount: uint32_t = 1
            baseArrayLayer: uint32_t = 0
            layerCount: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView: VkImageView* = 0x610000017c40

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb510:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb300:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageViewCreateInfo* = 0x7ffedffdb550:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext: const void* = NULL
        flags: VkImageViewCreateFlags = 0
        image: VkImage = 0x615000034b00
        viewType: VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components: VkComponentMapping = 0x7ffedffdb578:
            r: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 0x7ffedffdb588:
            aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel: uint32_t = 0
            levelCount: uint32_t = 1
            baseArrayLayer: uint32_t = 0
            layerCount: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView: VkImageView* = 0x610000017d40

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb510:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties2* = 0x7ffedffdb090:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext: void* = NULL
        formatProperties: VkFormatProperties = 0x7ffedffdb0a0:
            linearTilingFeatures: VkFormatFeatureFlags = 0
            optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
            bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdae10:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdae10:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdae10:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkRenderPassCreateInfo2* = 0x7ffedffdb830:
        sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 (1000109004)
        pNext: const void* = NULL
        flags: VkRenderPassCreateFlags = 0
        attachmentCount: uint32_t = 3
        pAttachments: const VkAttachmentDescription2* = 0x7ffedffdb550
            pAttachments[0]: const VkAttachmentDescription2 = 0x7ffedffdb550:
                sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 (1000109000)
                pNext: const void* = NULL
                flags: VkAttachmentDescriptionFlags = 0
                format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
                samples: VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
                loadOp: VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp: VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                stencilLoadOp: VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp: VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout: VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            pAttachments[1]: const VkAttachmentDescription2 = 0x7ffedffdb588:
                sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 (1000109000)
                pNext: const void* = NULL
                flags: VkAttachmentDescriptionFlags = 0
                format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
                samples: VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
                loadOp: VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp: VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                stencilLoadOp: VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp: VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout: VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            pAttachments[2]: const VkAttachmentDescription2 = 0x7ffedffdb5c0:
                sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 (1000109000)
                pNext: const void* = NULL
                flags: VkAttachmentDescriptionFlags = 0
                format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
                samples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp: VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                storeOp: VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp: VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp: VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout: VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
        subpassCount: uint32_t = 1
        pSubpasses: const VkSubpassDescription2* = 0x7ffedffdb730
            pSubpasses[0]: const VkSubpassDescription2 = 0x7ffedffdb730:
                sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 (1000109002)
                pNext: const void* = NULL
                flags: VkSubpassDescriptionFlags = 0
                pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                viewMask: uint32_t = 0
                inputAttachmentCount: uint32_t = 0
                pInputAttachments: const VkAttachmentReference2* = NULL
                colorAttachmentCount: uint32_t = 1
                pColorAttachments: const VkAttachmentReference2* = 0x7ffedffdb640
                    pColorAttachments[0]: const VkAttachmentReference2 = 0x7ffedffdb640:
                        sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 (1000109001)
                        pNext: const void* = NULL
                        attachment: uint32_t = 0
                        layout: VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                        aspectMask: VkImageAspectFlags = 0
                pResolveAttachments: const VkAttachmentReference2* = 0x7ffedffdb6e0
                    pResolveAttachments[0]: const VkAttachmentReference2 = 0x7ffedffdb6e0:
                        sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 (1000109001)
                        pNext: const void* = NULL
                        attachment: uint32_t = 2
                        layout: VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                        aspectMask: VkImageAspectFlags = 0
                pDepthStencilAttachment: const VkAttachmentReference2* = 0x7ffedffdb690:
                    sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 (1000109001)
                    pNext: const void* = NULL
                    attachment: uint32_t = 1
                    layout: VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
                    aspectMask: VkImageAspectFlags = 0
                preserveAttachmentCount: uint32_t = 0
                pPreserveAttachments: const uint32_t* = NULL
        dependencyCount: uint32_t = 1
        pDependencies: const VkSubpassDependency2* = 0x7ffedffdb7c0
            pDependencies[0]: const VkSubpassDependency2 = 0x7ffedffdb7c0:
                sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 (1000109003)
                pNext: const void* = NULL
                srcSubpass: uint32_t = 4294967295
                dstSubpass: uint32_t = 0
                srcStageMask: VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                dstStageMask: VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                srcAccessMask: VkAccessFlags = 0 (VK_ACCESS_NONE_KHR)
                dstAccessMask: VkAccessFlags = 1280 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
                dependencyFlags: VkDependencyFlags = 0
                viewOffset: int32_t = 0
        correlatedViewMaskCount: uint32_t = 0
        pCorrelatedViewMasks: const uint32_t* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pRenderPass: VkRenderPass* = 0x60b000059c70

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 0x7ffedffdb688:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext: const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount: uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 0x606000160108
            pBindings[0]: const VkDescriptorSetLayoutBinding = 0x606000160108:
                binding: uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount: uint32_t = 1
                stageFlags: VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 0x606000160120:
                binding: uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount: uint32_t = 1
                stageFlags: VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 0x61100002e940

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkShaderModuleCreateInfo* = 0x7ffedffdac20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext: const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize: size_t = 1872
        pCode: const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule: VkShaderModule* = 0x614000022440

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkShaderModuleCreateInfo* = 0x7ffedffdac20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext: const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize: size_t = 760
        pCode: const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule: VkShaderModule* = 0x614000024040

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 0x7ffedffdad50:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext: const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount: uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 0x602000045f50
            pSetLayouts[0]: const VkDescriptorSetLayout = 0x61100002e940
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 0x614000024440

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
    pFormatProperties: VkFormatProperties* = 0x7ffedffda8a0:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 0
        bufferFeatures: VkFormatFeatureFlags = 64 (VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
    pFormatProperties: VkFormatProperties* = 0x7ffedffda8a0:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 0
        bufferFeatures: VkFormatFeatureFlags = 64 (VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties: VkFormatProperties* = 0x7ffedffda8a0:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pipelineCache: VkPipelineCache = 0x0
    createInfoCount: uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 0x60e00003caa8
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 0x60e00003caa8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext: const void* = NULL
            flags: VkPipelineCreateFlags = 0
            stageCount: uint32_t = 2
            pStages: const VkPipelineShaderStageCreateInfo* = 0x60b00005c198
                pStages[0]: const VkPipelineShaderStageCreateInfo = 0x60b00005c198:
                    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext: const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage: VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module: VkShaderModule = 0x614000022440
                    pName: const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
                pStages[1]: const VkPipelineShaderStageCreateInfo = 0x60b00005c1c8:
                    sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext: const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage: VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module: VkShaderModule = 0x614000024040
                    pName: const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 0x60400014f190:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext: const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 0x6020000475d0
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 0x6020000475d0:
                        binding: uint32_t = 0
                        stride: uint32_t = 32
                        inputRate: VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 0x60400014f1d0
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 0x60400014f1d0:
                        location: uint32_t = 0
                        binding: uint32_t = 0
                        format: VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset: uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 0x60400014f1e0:
                        location: uint32_t = 1
                        binding: uint32_t = 0
                        format: VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset: uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 0x60400014f1f0:
                        location: uint32_t = 2
                        binding: uint32_t = 0
                        format: VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset: uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 0x60300019f300:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext: const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology: VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 0x60400014f210:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext: const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount: uint32_t = 1
                pViewports: const VkViewport* = 0x60300019f330
                    pViewports[0]: const VkViewport = 0x60300019f330:
                        x: float = 0
                        y: float = 0
                        width: float = 2560
                        height: float = 1440
                        minDepth: float = 0
                        maxDepth: float = 1
                scissorCount: uint32_t = 1
                pScissors: const VkRect2D* = 0x6020000475f0
                    pScissors[0]: const VkRect2D = 0x6020000475f0:
                        offset: VkOffset2D = 0x6020000475f0:
                            x: int32_t = 0
                            y: int32_t = 0
                        extent: VkExtent2D = 0x6020000475f8:
                            width: uint32_t = 2560
                            height: uint32_t = 1440
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 0x606000166d60:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext: const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable: VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode: VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode: VkCullModeFlags = 2 (VK_CULL_MODE_BACK_BIT)
                frontFace: VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable: VkBool32 = 0
                depthBiasConstantFactor: float = 0
                depthBiasClamp: float = 0
                depthBiasSlopeFactor: float = 0
                lineWidth: float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 0x60400014f250:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext: const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
                sampleShadingEnable: VkBool32 = 1
                minSampleShading: float = 0.2
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable: VkBool32 = 0
                alphaToOneEnable: VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 0x60b00005c240:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext: const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable: VkBool32 = 1
                depthWriteEnable: VkBool32 = 1
                depthCompareOp: VkCompareOp = VK_COMPARE_OP_LESS (1)
                depthBoundsTestEnable: VkBool32 = 0
                stencilTestEnable: VkBool32 = 0
                front: VkStencilOpState = 0x60b00005c268:
                    failOp: VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp: VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp: VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp: VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask: uint32_t = 0
                    writeMask: uint32_t = 0
                    reference: uint32_t = 0
                back: VkStencilOpState = 0x60b00005c284:
                    failOp: VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp: VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp: VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp: VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask: uint32_t = 0
                    writeMask: uint32_t = 0
                    reference: uint32_t = 0
                minDepthBounds: float = 0
                maxDepthBounds: float = 1
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 0x606000166dc0:
                sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext: const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable: VkBool32 = 0
                logicOp: VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount: uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 0x60300019f360
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 0x60300019f360:
                        blendEnable: VkBool32 = 1
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA (6)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA (7)
                        colorBlendOp: VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp: VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants: float[4] = 0x606000166de8
                    blendConstants[0]: float = 0
                    blendConstants[1]: float = 0
                    blendConstants[2]: float = 0
                    blendConstants[3]: float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = NULL
            layout: VkPipelineLayout = 0x614000024440
            renderPass: VkRenderPass = 0x60b000059c70
            subpass: uint32_t = 0
            basePipelineHandle: VkPipeline = 0x0
            basePipelineIndex: int32_t = -1
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines: VkPipeline* = 0x7ffedffde540
        pPipelines[0]: VkPipeline = 0x61b00002ae80

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    shaderModule: VkShaderModule = 0x614000022440
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    shaderModule: VkShaderModule = 0x614000024040
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkCommandPoolCreateInfo* = 0x7ffedffdb840:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext: const void* = NULL
        flags: VkCommandPoolCreateFlags = 0
        queueFamilyIndex: uint32_t = 3
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool: VkCommandPool* = 0x6260000d2100

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkCommandPoolCreateInfo* = 0x7ffedffdb890:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext: const void* = NULL
        flags: VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex: uint32_t = 3
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool: VkCommandPool* = 0x6260000d5100

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    type: VkImageType = VK_IMAGE_TYPE_2D (1)
    tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
    usage: VkImageUsageFlags = 80 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT)
    flags: VkImageCreateFlags = 0
    pImageFormatProperties: VkImageFormatProperties* = 0x7ffedffdb200:
        maxExtent: VkExtent3D = 0x7ffedffdb200:
            width: uint32_t = 16384
            height: uint32_t = 16384
            depth: uint32_t = 1
        maxMipLevels: uint32_t = 15
        maxArrayLayers: uint32_t = 2048
        sampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
        maxResourceSize: VkDeviceSize = 4611686018427387904

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb130:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageCreateInfo* = 0x7ffedffdb250:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext: const void* = NULL
        flags: VkImageCreateFlags = 0
        imageType: VkImageType = VK_IMAGE_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        extent: VkExtent3D = 0x7ffedffdb26c:
            width: uint32_t = 2560
            height: uint32_t = 1440
            depth: uint32_t = 1
        mipLevels: uint32_t = 1
        arrayLayers: uint32_t = 1
        samples: VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
        tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage: VkImageUsageFlags = 80 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage: VkImage* = 0x61200004b4c0

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    image: VkImage = 0x61200004b4c0
    pMemoryRequirements: VkMemoryRequirements* = 0x61900007b2f8:
        size: VkDeviceSize = 14745600
        alignment: VkDeviceSize = 4
        memoryTypeBits: uint32_t = 5

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb1a0:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkImageMemoryRequirementsInfo2* = 0x7ffedffdb2c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext: const void* = NULL
        image: VkImage = 0x61200004b4c0
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb520:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: const void* = VkMemoryDedicatedRequirements
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb530:
            size: VkDeviceSize = 14745600
            alignment: VkDeviceSize = 4
            memoryTypeBits: uint32_t = 5
        pNext: VkMemoryDedicatedRequirements = 0x7ffedffdb4e0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext: void* = NULL
            prefersDedicatedAllocation: VkBool32 = 1
            requiresDedicatedAllocation: VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb288:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = VkMemoryDedicatedAllocateInfo
        allocationSize: VkDeviceSize = 14745600
        memoryTypeIndex: uint32_t = 0
        pNext: VkMemoryDedicatedAllocateInfo = 0x6030001a4a00:
            sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO (1000127001)
            pNext: const void* = NULL
            image: VkImage = 0x61200004b4c0
            buffer: VkBuffer = 0x0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200004b640

Thread 0, Frame 0:
vkBindImageMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindImageMemoryInfo* = 0x60400015b758
        pBindInfos[0]: const VkBindImageMemoryInfo = 0x60400015b758:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO (1000157001)
            pNext: const void* = NULL
            image: VkImage = 0x61200004b4c0
            memory: VkDeviceMemory = 0x61200004b640
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb300:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageViewCreateInfo* = 0x7ffedffdb550:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext: const void* = NULL
        flags: VkImageViewCreateFlags = 0
        image: VkImage = 0x61200004b4c0
        viewType: VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components: VkComponentMapping = 0x7ffedffdb578:
            r: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 0x7ffedffdb588:
            aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel: uint32_t = 0
            levelCount: uint32_t = 1
            baseArrayLayer: uint32_t = 0
            layerCount: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView: VkImageView* = 0x610000022740

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb510:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties2* = 0x7ffedffdb5b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext: void* = NULL
        formatProperties: VkFormatProperties = 0x7ffedffdb5c0:
            linearTilingFeatures: VkFormatFeatureFlags = 0
            optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
            bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    type: VkImageType = VK_IMAGE_TYPE_2D (1)
    tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
    usage: VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
    flags: VkImageCreateFlags = 0
    pImageFormatProperties: VkImageFormatProperties* = 0x7ffedffdb220:
        maxExtent: VkExtent3D = 0x7ffedffdb220:
            width: uint32_t = 16384
            height: uint32_t = 16384
            depth: uint32_t = 1
        maxMipLevels: uint32_t = 15
        maxArrayLayers: uint32_t = 2048
        sampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
        maxResourceSize: VkDeviceSize = 4611686018427387904

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb150:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageCreateInfo* = 0x7ffedffdb270:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext: const void* = NULL
        flags: VkImageCreateFlags = 0
        imageType: VkImageType = VK_IMAGE_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent: VkExtent3D = 0x7ffedffdb28c:
            width: uint32_t = 2560
            height: uint32_t = 1440
            depth: uint32_t = 1
        mipLevels: uint32_t = 1
        arrayLayers: uint32_t = 1
        samples: VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
        tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage: VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage: VkImage* = 0x61200004b7c0

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    image: VkImage = 0x61200004b7c0
    pMemoryRequirements: VkMemoryRequirements* = 0x61900007b7f8:
        size: VkDeviceSize = 14745600
        alignment: VkDeviceSize = 4
        memoryTypeBits: uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb1c0:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkImageMemoryRequirementsInfo2* = 0x7ffedffdb2e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext: const void* = NULL
        image: VkImage = 0x61200004b7c0
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb540:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: const void* = VkMemoryDedicatedRequirements
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb550:
            size: VkDeviceSize = 14745600
            alignment: VkDeviceSize = 4
            memoryTypeBits: uint32_t = 1
        pNext: VkMemoryDedicatedRequirements = 0x7ffedffdb500:
            sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext: void* = NULL
            prefersDedicatedAllocation: VkBool32 = 1
            requiresDedicatedAllocation: VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb2a8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = VkMemoryDedicatedAllocateInfo
        allocationSize: VkDeviceSize = 14745600
        memoryTypeIndex: uint32_t = 0
        pNext: VkMemoryDedicatedAllocateInfo = 0x6030001a4d60:
            sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO (1000127001)
            pNext: const void* = NULL
            image: VkImage = 0x61200004b7c0
            buffer: VkBuffer = 0x0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200004b940

Thread 0, Frame 0:
vkBindImageMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindImageMemoryInfo* = 0x60400015c418
        pBindInfos[0]: const VkBindImageMemoryInfo = 0x60400015c418:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO (1000157001)
            pNext: const void* = NULL
            image: VkImage = 0x61200004b7c0
            memory: VkDeviceMemory = 0x61200004b940
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb320:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageViewCreateInfo* = 0x7ffedffdb570:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext: const void* = NULL
        flags: VkImageViewCreateFlags = 0
        image: VkImage = 0x61200004b7c0
        viewType: VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components: VkComponentMapping = 0x7ffedffdb598:
            r: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 0x7ffedffdb5a8:
            aspectMask: VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel: uint32_t = 0
            levelCount: uint32_t = 1
            baseArrayLayer: uint32_t = 0
            layerCount: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView: VkImageView* = 0x610000022840

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb530:
        linearTilingFeatures: VkFormatFeatureFlags = 0
        optimalTilingFeatures: VkFormatFeatureFlags = 56833 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkFramebufferCreateInfo* = 0x7ffedffdb660:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext: const void* = NULL
        flags: VkFramebufferCreateFlags = 0
        renderPass: VkRenderPass = 0x60b000059c70
        attachmentCount: uint32_t = 3
        pAttachments: const VkImageView* = 0x6030001a4f10
            pAttachments[0]: const VkImageView = 0x610000022740
            pAttachments[1]: const VkImageView = 0x610000022840
            pAttachments[2]: const VkImageView = 0x610000017b40
        width: uint32_t = 2560
        height: uint32_t = 1440
        layers: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pFramebuffer: VkFramebuffer* = 0x60b00005c920

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkFramebufferCreateInfo* = 0x7ffedffdb660:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext: const void* = NULL
        flags: VkFramebufferCreateFlags = 0
        renderPass: VkRenderPass = 0x60b000059c70
        attachmentCount: uint32_t = 3
        pAttachments: const VkImageView* = 0x6030001a4f70
            pAttachments[0]: const VkImageView = 0x610000022740
            pAttachments[1]: const VkImageView = 0x610000022840
            pAttachments[2]: const VkImageView = 0x610000017c40
        width: uint32_t = 2560
        height: uint32_t = 1440
        layers: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pFramebuffer: VkFramebuffer* = 0x60b00005c9d0

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkFramebufferCreateInfo* = 0x7ffedffdb660:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext: const void* = NULL
        flags: VkFramebufferCreateFlags = 0
        renderPass: VkRenderPass = 0x60b000059c70
        attachmentCount: uint32_t = 3
        pAttachments: const VkImageView* = 0x6030001a4fd0
            pAttachments[0]: const VkImageView = 0x610000022740
            pAttachments[1]: const VkImageView = 0x610000022840
            pAttachments[2]: const VkImageView = 0x610000017d40
        width: uint32_t = 2560
        height: uint32_t = 1440
        layers: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pFramebuffer: VkFramebuffer* = 0x60b00005ca80

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb290:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 4194304
        usage: VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f000020110

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000020110
    pMemoryRequirements: VkMemoryRequirements* = 0x61300006a078:
        size: VkDeviceSize = 4194304
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb280:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f000020110
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb460:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb470:
            size: VkDeviceSize = 4194304
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb248:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 4194304
        memoryTypeIndex: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200004bac0

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x60400015c958
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x60400015c958:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f000020110
            memory: VkDeviceMemory = 0x61200004bac0
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200004bac0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11ec91000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200004bac0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    type: VkImageType = VK_IMAGE_TYPE_2D (1)
    tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
    usage: VkImageUsageFlags = 7 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
    flags: VkImageCreateFlags = 0
    pImageFormatProperties: VkImageFormatProperties* = 0x7ffedffdb000:
        maxExtent: VkExtent3D = 0x7ffedffdb000:
            width: uint32_t = 16384
            height: uint32_t = 16384
            depth: uint32_t = 1
        maxMipLevels: uint32_t = 15
        maxArrayLayers: uint32_t = 2048
        sampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
        maxResourceSize: VkDeviceSize = 4611686018427387904

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdaf30:
        linearTilingFeatures: VkFormatFeatureFlags = 54273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56705 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 72 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageCreateInfo* = 0x7ffedffdb050:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext: const void* = NULL
        flags: VkImageCreateFlags = 0
        imageType: VkImageType = VK_IMAGE_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        extent: VkExtent3D = 0x7ffedffdb06c:
            width: uint32_t = 1024
            height: uint32_t = 1024
            depth: uint32_t = 1
        mipLevels: uint32_t = 11
        arrayLayers: uint32_t = 1
        samples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling: VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage: VkImageUsageFlags = 7 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage: VkImage* = 0x61200004bc40

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    image: VkImage = 0x61200004bc40
    pMemoryRequirements: VkMemoryRequirements* = 0x61900007bcf8:
        size: VkDeviceSize = 5592404
        alignment: VkDeviceSize = 4
        memoryTypeBits: uint32_t = 5

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdafa0:
        linearTilingFeatures: VkFormatFeatureFlags = 54273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56705 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 72 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkImageMemoryRequirementsInfo2* = 0x7ffedffdb0c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext: const void* = NULL
        image: VkImage = 0x61200004bc40
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb320:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: const void* = VkMemoryDedicatedRequirements
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb330:
            size: VkDeviceSize = 5592404
            alignment: VkDeviceSize = 4
            memoryTypeBits: uint32_t = 5
        pNext: VkMemoryDedicatedRequirements = 0x7ffedffdb2e0:
            sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext: void* = NULL
            prefersDedicatedAllocation: VkBool32 = 1
            requiresDedicatedAllocation: VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb088:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = VkMemoryDedicatedAllocateInfo
        allocationSize: VkDeviceSize = 5592404
        memoryTypeIndex: uint32_t = 0
        pNext: VkMemoryDedicatedAllocateInfo = 0x6030001a5300:
            sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO (1000127001)
            pNext: const void* = NULL
            image: VkImage = 0x61200004bc40
            buffer: VkBuffer = 0x0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200004bdc0

Thread 0, Frame 0:
vkBindImageMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindImageMemoryInfo* = 0x60400015d098
        pBindInfos[0]: const VkBindImageMemoryInfo = 0x60400015d098:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO (1000157001)
            pNext: const void* = NULL
            image: VkImage = 0x61200004bc40
            memory: VkDeviceMemory = 0x61200004bdc0
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 0x7ffedffdb0b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext: const void* = NULL
        commandPool: VkCommandPool = 0x6260000d5100
        level: VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount: uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 0x7ffedffdb200
        pCommandBuffers[0]: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb270:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000072798
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000430e8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000430e8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 0 (VK_ACCESS_NONE_KHR)
            dstAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043118:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 0
                levelCount: uint32_t = 11
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000043158
        pSubmits[0]: const VkSubmitInfo = 0x607000043158:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000049250
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798
            signalSemaphoreCount: uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence: VkFence = 0x0

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d5100
    commandBufferCount: uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 0x7ffedffdb180
        pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 0x7ffedffdb1b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext: const void* = NULL
        commandPool: VkCommandPool = 0x6260000d5100
        level: VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount: uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 0x7ffedffdb300
        pCommandBuffers[0]: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb370:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer: VkCommandBuffer = 0x611000072798
    srcBuffer: VkBuffer = 0x60f000020110
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkBufferImageCopy* = 0x7ffedffdb530
        pRegions[0]: const VkBufferImageCopy = 0x7ffedffdb530:
            bufferOffset: VkDeviceSize = 0
            bufferRowLength: uint32_t = 0
            bufferImageHeight: uint32_t = 0
            imageSubresource: VkImageSubresourceLayers = 0x7ffedffdb540:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 0
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            imageOffset: VkOffset3D = 0x7ffedffdb550:
                x: int32_t = 0
                y: int32_t = 0
                z: int32_t = 0
            imageExtent: VkExtent3D = 0x7ffedffdb55c:
                width: uint32_t = 1024
                height: uint32_t = 1024
                depth: uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000043388
        pSubmits[0]: const VkSubmitInfo = 0x607000043388:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000493d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798
            signalSemaphoreCount: uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence: VkFence = 0x0

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d5100
    commandBufferCount: uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 0x7ffedffdb280
        pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties: VkFormatProperties2* = 0x7ffedffdb010:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext: void* = NULL
        formatProperties: VkFormatProperties = 0x7ffedffdb020:
            linearTilingFeatures: VkFormatFeatureFlags = 54273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
            optimalTilingFeatures: VkFormatFeatureFlags = 56705 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
            bufferFeatures: VkFormatFeatureFlags = 72 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 0x7ffedffdac70:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext: const void* = NULL
        commandPool: VkCommandPool = 0x6260000d2100
        level: VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount: uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 0x7ffedffdadc0
        pCommandBuffers[0]: VkCommandBuffer = 0x611000074598

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000074598
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdae30:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000433f8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000433f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043428:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 0
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 0
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 1024
                    y: int32_t = 1024
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 512
                    y: int32_t = 512
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043468
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043468:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043498:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 0
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000434d8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000434d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043508:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 1
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 512
                    y: int32_t = 512
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 2
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 256
                    y: int32_t = 256
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043548
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043548:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043578:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 1
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000435b8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000435b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x6070000435e8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 2
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 2
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 256
                    y: int32_t = 256
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 3
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 128
                    y: int32_t = 128
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043628
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043628:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043658:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 2
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043698
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043698:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x6070000436c8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 3
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 3
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 128
                    y: int32_t = 128
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 4
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 64
                    y: int32_t = 64
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043708
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043708:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043738:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 3
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043778
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043778:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x6070000437a8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 4
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 4
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 64
                    y: int32_t = 64
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 5
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 32
                    y: int32_t = 32
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000437e8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000437e8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043818:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 4
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043858
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043858:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043888:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 5
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 5
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 32
                    y: int32_t = 32
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 6
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 16
                    y: int32_t = 16
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000438c8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000438c8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x6070000438f8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 5
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043938
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043938:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043968:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 6
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 6
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 16
                    y: int32_t = 16
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 7
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 8
                    y: int32_t = 8
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x6070000439a8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x6070000439a8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x6070000439d8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 6
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043a18
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043a18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043a48:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 7
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 7
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 8
                    y: int32_t = 8
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 8
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 4
                    y: int32_t = 4
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043a88
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043a88:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043ab8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 7
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043af8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043af8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043b28:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 8
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 8
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 4
                    y: int32_t = 4
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 9
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 2
                    y: int32_t = 2
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043b68
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043b68:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043b98:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 8
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043bd8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043bd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043c08:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 9
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcImage: VkImage = 0x61200004bc40
    srcImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage: VkImage = 0x61200004bc40
    dstImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount: uint32_t = 1
    pRegions: const VkImageBlit* = 0x7ffedffdb310
        pRegions[0]: const VkImageBlit = 0x7ffedffdb310:
            srcSubresource: VkImageSubresourceLayers = 0x7ffedffdb310:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 9
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            srcOffsets: VkOffset3D[2] = 0x7ffedffdb320
                srcOffsets[0]: VkOffset3D = 0x7ffedffdb320:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                srcOffsets[1]: VkOffset3D = 0x7ffedffdb32c:
                    x: int32_t = 2
                    y: int32_t = 2
                    z: int32_t = 1
            dstSubresource: VkImageSubresourceLayers = 0x7ffedffdb338:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel: uint32_t = 10
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1
            dstOffsets: VkOffset3D[2] = 0x7ffedffdb348
                dstOffsets[0]: VkOffset3D = 0x7ffedffdb348:
                    x: int32_t = 0
                    y: int32_t = 0
                    z: int32_t = 0
                dstOffsets[1]: VkOffset3D = 0x7ffedffdb354:
                    x: int32_t = 1
                    y: int32_t = 1
                    z: int32_t = 1
    filter: VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043c48
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043c48:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043c78:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 9
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount: uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 0x607000043cb8
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 0x607000043cb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext: const void* = NULL
            srcAccessMask: VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask: VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout: VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex: uint32_t = 4294967295
            dstQueueFamilyIndex: uint32_t = 4294967295
            image: VkImage = 0x61200004bc40
            subresourceRange: VkImageSubresourceRange = 0x607000043ce8:
                aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel: uint32_t = 10
                levelCount: uint32_t = 1
                baseArrayLayer: uint32_t = 0
                layerCount: uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000074598

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000043d28
        pSubmits[0]: const VkSubmitInfo = 0x607000043d28:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000049790
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence: VkFence = 0x0

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d2100
    commandBufferCount: uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 0x7ffedffdad40
        pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000020110
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200004bac0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb360:
        linearTilingFeatures: VkFormatFeatureFlags = 54273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56705 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 72 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkImageViewCreateInfo* = 0x7ffedffdb5b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext: const void* = NULL
        flags: VkImageViewCreateFlags = 0
        image: VkImage = 0x61200004bc40
        viewType: VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        components: VkComponentMapping = 0x7ffedffdb5d8:
            r: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a: VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 0x7ffedffdb5e8:
            aspectMask: VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel: uint32_t = 0
            levelCount: uint32_t = 11
            baseArrayLayer: uint32_t = 0
            layerCount: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView: VkImageView* = 0x610000024d40

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb570:
        linearTilingFeatures: VkFormatFeatureFlags = 54273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56705 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 72 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkSamplerCreateInfo* = 0x7ffedffdb718:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext: const void* = NULL
        flags: VkSamplerCreateFlags = 0
        magFilter: VkFilter = VK_FILTER_LINEAR (1)
        minFilter: VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode: VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeV: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeW: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        mipLodBias: float = 0
        anisotropyEnable: VkBool32 = 1
        maxAnisotropy: float = 16
        compareEnable: VkBool32 = 0
        compareOp: VkCompareOp = VK_COMPARE_OP_ALWAYS (7)
        minLod: float = 0
        maxLod: float = 11
        borderColor: VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates: VkBool32 = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSampler: VkSampler* = 0x60f000020e30

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb230:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 114112
        usage: VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f000020f20

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000020f20
    pMemoryRequirements: VkMemoryRequirements* = 0x61300006f9b8:
        size: VkDeviceSize = 114112
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb220:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f000020f20
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb410:
            size: VkDeviceSize = 114112
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb1e8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 114112
        memoryTypeIndex: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005c5c0

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x604000212e98
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x604000212e98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f000020f20
            memory: VkDeviceMemory = 0x61200005c5c0
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c5c0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f71b000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c5c0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb230:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 114112
        usage: VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f000021010

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000021010
    pMemoryRequirements: VkMemoryRequirements* = 0x61300005e538:
        size: VkDeviceSize = 114112
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb220:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f000021010
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb410:
            size: VkDeviceSize = 114112
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb1e8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 114112
        memoryTypeIndex: uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005c740

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x604000213018
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x604000213018:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f000021010
            memory: VkDeviceMemory = 0x61200005c740
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 0x7ffedffdb1f0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext: const void* = NULL
        commandPool: VkCommandPool = 0x6260000d5100
        level: VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount: uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 0x7ffedffdb340
        pCommandBuffers[0]: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb3b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer: VkCommandBuffer = 0x611000072798
    srcBuffer: VkBuffer = 0x60f000020f20
    dstBuffer: VkBuffer = 0x60f000021010
    regionCount: uint32_t = 1
    pRegions: const VkBufferCopy* = 0x7ffedffdb500
        pRegions[0]: const VkBufferCopy = 0x7ffedffdb500:
            srcOffset: VkDeviceSize = 0
            dstOffset: VkDeviceSize = 0
            size: VkDeviceSize = 114112

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000044188
        pSubmits[0]: const VkSubmitInfo = 0x607000044188:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000049cd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798
            signalSemaphoreCount: uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence: VkFence = 0x0

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d5100
    commandBufferCount: uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 0x7ffedffdb2c0
        pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000020f20
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c5c0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb230:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 45936
        usage: VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f000021100

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000021100
    pMemoryRequirements: VkMemoryRequirements* = 0x61300005f178:
        size: VkDeviceSize = 45936
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb220:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f000021100
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb410:
            size: VkDeviceSize = 45936
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb1e8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 45936
        memoryTypeIndex: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005c8c0

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x604000213298
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x604000213298:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f000021100
            memory: VkDeviceMemory = 0x61200005c8c0
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c8c0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f747000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c8c0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb230:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 45936
        usage: VkBufferUsageFlags = 66 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f0000211f0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000211f0
    pMemoryRequirements: VkMemoryRequirements* = 0x61300005fdb8:
        size: VkDeviceSize = 45936
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb220:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f0000211f0
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb410:
            size: VkDeviceSize = 45936
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb1e8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 45936
        memoryTypeIndex: uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005ca40

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x604000213418
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x604000213418:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f0000211f0
            memory: VkDeviceMemory = 0x61200005ca40
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 0x7ffedffdb1f0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext: const void* = NULL
        commandPool: VkCommandPool = 0x6260000d5100
        level: VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount: uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 0x7ffedffdb340
        pCommandBuffers[0]: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb3b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer: VkCommandBuffer = 0x611000072798
    srcBuffer: VkBuffer = 0x60f000021100
    dstBuffer: VkBuffer = 0x60f0000211f0
    regionCount: uint32_t = 1
    pRegions: const VkBufferCopy* = 0x7ffedffdb500
        pRegions[0]: const VkBufferCopy = 0x7ffedffdb500:
            srcOffset: VkDeviceSize = 0
            dstOffset: VkDeviceSize = 0
            size: VkDeviceSize = 45936

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000044268
        pSubmits[0]: const VkSubmitInfo = 0x607000044268:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000049df0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798
            signalSemaphoreCount: uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence: VkFence = 0x0

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d5100
    commandBufferCount: uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 0x7ffedffdb2c0
        pCommandBuffers[0]: const VkCommandBuffer = 0x611000072798

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000021100
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c8c0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb450:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 192
        usage: VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f0000212e0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000212e0
    pMemoryRequirements: VkMemoryRequirements* = 0x61300004eaf8:
        size: VkDeviceSize = 192
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb440:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f0000212e0
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb620:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb630:
            size: VkDeviceSize = 192
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb408:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 192
        memoryTypeIndex: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005cbc0

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x604000213698
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x604000213698:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f0000212e0
            memory: VkDeviceMemory = 0x61200005cbc0
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb450:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 192
        usage: VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f0000213d0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000213d0
    pMemoryRequirements: VkMemoryRequirements* = 0x61300004f738:
        size: VkDeviceSize = 192
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb440:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f0000213d0
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb620:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb630:
            size: VkDeviceSize = 192
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb408:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 192
        memoryTypeIndex: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005cd40

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x6040002137d8
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x6040002137d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f0000213d0
            memory: VkDeviceMemory = 0x61200005cd40
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkBufferCreateInfo* = 0x7ffedffdb450:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext: const void* = NULL
        flags: VkBufferCreateFlags = 0
        size: VkDeviceSize = 192
        usage: VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode: VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount: uint32_t = 1
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer: VkBuffer* = 0x60f0000214c0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000214c0
    pMemoryRequirements: VkMemoryRequirements* = 0x61300003e2b8:
        size: VkDeviceSize = 192
        alignment: VkDeviceSize = 256
        memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device: VkDevice = 0x622000052918
    pInfo: const VkBufferMemoryRequirementsInfo2* = 0x7ffedffdb440:
        sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext: const void* = NULL
        buffer: VkBuffer = 0x60f0000214c0
    pMemoryRequirements: VkMemoryRequirements2* = 0x7ffedffdb620:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext: void* = NULL
        memoryRequirements: VkMemoryRequirements = 0x7ffedffdb630:
            size: VkDeviceSize = 192
            alignment: VkDeviceSize = 256
            memoryTypeBits: uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkMemoryAllocateInfo* = 0x7ffedffdb408:
        sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext: const void* = NULL
        allocationSize: VkDeviceSize = 192
        memoryTypeIndex: uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory: VkDeviceMemory* = 0x61200005cec0

Thread 0, Frame 0:
vkBindBufferMemory2(device, bindInfoCount, pBindInfos) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    bindInfoCount: uint32_t = 1
    pBindInfos: const VkBindBufferMemoryInfo* = 0x604000213918
        pBindInfos[0]: const VkBindBufferMemoryInfo = 0x604000213918:
            sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (1000157000)
            pNext: const void* = NULL
            buffer: VkBuffer = 0x60f0000214c0
            memory: VkDeviceMemory = 0x61200005cec0
            memoryOffset: VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkDescriptorPoolCreateInfo* = 0x7ffedffdb880:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext: const void* = NULL
        flags: VkDescriptorPoolCreateFlags = 0
        maxSets: uint32_t = 3
        poolSizeCount: uint32_t = 2
        pPoolSizes: const VkDescriptorPoolSize* = 0x7ffedffdb860
            pPoolSizes[0]: const VkDescriptorPoolSize = 0x7ffedffdb860:
                type: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount: uint32_t = 3
            pPoolSizes[1]: const VkDescriptorPoolSize = 0x7ffedffdb868:
                type: VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount: uint32_t = 3
    pAllocator: const VkAllocationCallbacks* = NULL
    pDescriptorPool: VkDescriptorPool* = 0x619000082a80

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 0x604000213c10:
        sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext: const void* = NULL
        descriptorPool: VkDescriptorPool = 0x619000082a80
        descriptorSetCount: uint32_t = 3
        pSetLayouts: const VkDescriptorSetLayout* = 0x6030001a9350
            pSetLayouts[0]: const VkDescriptorSetLayout = 0x61100002e940
            pSetLayouts[1]: const VkDescriptorSetLayout = 0x61100002e940
            pSetLayouts[2]: const VkDescriptorSetLayout = 0x61100002e940
    pDescriptorSets: VkDescriptorSet* = 0x6030001a92f0
        pDescriptorSets[0]: VkDescriptorSet = 0x61300003eb00
        pDescriptorSets[1]: VkDescriptorSet = 0x61300003eb78
        pDescriptorSets[2]: VkDescriptorSet = 0x61300003ebf0

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device: VkDevice = 0x622000052918
    descriptorWriteCount: uint32_t = 2
    pDescriptorWrites: const VkWriteDescriptorSet* = 0x60d000031398
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 0x60d000031398:
            sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext: const void* = NULL
            dstSet: VkDescriptorSet = 0x61300003eb00
            dstBinding: uint32_t = 0
            dstArrayElement: uint32_t = 0
            descriptorCount: uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 0x6030001a9380
                pBufferInfo[0]: const VkDescriptorBufferInfo = 0x6030001a9380:
                    buffer: VkBuffer = 0x60f0000212e0
                    offset: VkDeviceSize = 0
                    range: VkDeviceSize = 18446744073709551615
            pTexelBufferView: const VkBufferView* = UNUSED
        pDescriptorWrites[1]: const VkWriteDescriptorSet = 0x60d0000313d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext: const void* = NULL
            dstSet: VkDescriptorSet = 0x61300003eb00
            dstBinding: uint32_t = 1
            dstArrayElement: uint32_t = 0
            descriptorCount: uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo: const VkDescriptorImageInfo* = 0x6030001a93b0
                pImageInfo[0]: const VkDescriptorImageInfo = 0x6030001a93b0:
                    sampler: VkSampler = 0x60f000020e30
                    imageView: VkImageView = 0x610000024d40
                    imageLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount: uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device: VkDevice = 0x622000052918
    descriptorWriteCount: uint32_t = 2
    pDescriptorWrites: const VkWriteDescriptorSet* = 0x60d000031468
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 0x60d000031468:
            sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext: const void* = NULL
            dstSet: VkDescriptorSet = 0x61300003eb78
            dstBinding: uint32_t = 0
            dstArrayElement: uint32_t = 0
            descriptorCount: uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 0x6030001a93e0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 0x6030001a93e0:
                    buffer: VkBuffer = 0x60f0000213d0
                    offset: VkDeviceSize = 0
                    range: VkDeviceSize = 18446744073709551615
            pTexelBufferView: const VkBufferView* = UNUSED
        pDescriptorWrites[1]: const VkWriteDescriptorSet = 0x60d0000314a8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext: const void* = NULL
            dstSet: VkDescriptorSet = 0x61300003eb78
            dstBinding: uint32_t = 1
            dstArrayElement: uint32_t = 0
            descriptorCount: uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo: const VkDescriptorImageInfo* = 0x6030001a9410
                pImageInfo[0]: const VkDescriptorImageInfo = 0x6030001a9410:
                    sampler: VkSampler = 0x60f000020e30
                    imageView: VkImageView = 0x610000024d40
                    imageLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount: uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device: VkDevice = 0x622000052918
    descriptorWriteCount: uint32_t = 2
    pDescriptorWrites: const VkWriteDescriptorSet* = 0x60d000031538
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 0x60d000031538:
            sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext: const void* = NULL
            dstSet: VkDescriptorSet = 0x61300003ebf0
            dstBinding: uint32_t = 0
            dstArrayElement: uint32_t = 0
            descriptorCount: uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 0x6030001a9440
                pBufferInfo[0]: const VkDescriptorBufferInfo = 0x6030001a9440:
                    buffer: VkBuffer = 0x60f0000214c0
                    offset: VkDeviceSize = 0
                    range: VkDeviceSize = 18446744073709551615
            pTexelBufferView: const VkBufferView* = UNUSED
        pDescriptorWrites[1]: const VkWriteDescriptorSet = 0x60d000031578:
            sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext: const void* = NULL
            dstSet: VkDescriptorSet = 0x61300003ebf0
            dstBinding: uint32_t = 1
            dstArrayElement: uint32_t = 0
            descriptorCount: uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo: const VkDescriptorImageInfo* = 0x6030001a9470
                pImageInfo[0]: const VkDescriptorImageInfo = 0x6030001a9470:
                    sampler: VkSampler = 0x60f000020e30
                    imageView: VkImageView = 0x610000024d40
                    imageLayout: VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount: uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 0x7ffedffdb2b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext: const void* = NULL
        commandPool: VkCommandPool = 0x6260000d2100
        level: VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount: uint32_t = 3
    pCommandBuffers: VkCommandBuffer* = 0x6030001a94a0
        pCommandBuffers[0]: VkCommandBuffer = 0x611000074598
        pCommandBuffers[1]: VkCommandBuffer = 0x611000080ed8
        pCommandBuffers[2]: VkCommandBuffer = 0x611000081018

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000074598
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb4b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 0
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    pRenderPassBegin: const VkRenderPassBeginInfo* = 0x7ffedffdb2f8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext: const void* = NULL
        renderPass: VkRenderPass = 0x60b000059c70
        framebuffer: VkFramebuffer = 0x60b00005c920
        renderArea: VkRect2D = 0x7ffedffdb318:
            offset: VkOffset2D = 0x7ffedffdb318:
                x: int32_t = 0
                y: int32_t = 0
            extent: VkExtent2D = 0x7ffedffdb320:
                width: uint32_t = 2560
                height: uint32_t = 1440
        clearValueCount: uint32_t = 2
        pClearValues: const VkClearValue* = 0x6030001a9770
            pClearValues[0]: const VkClearValue = 0x6030001a9770 (Union):
                color: VkClearColorValue = 0x6030001a9770 (Union):
                    float32: float[4] = 0x6030001a9770
                        float32[0]: float = 0
                        float32[1]: float = 0
                        float32[2]: float = 0
                        float32[3]: float = 1
                    int32: int32_t[4] = 0x6030001a9770
                        int32[0]: int32_t = 0
                        int32[1]: int32_t = 0
                        int32[2]: int32_t = 0
                        int32[3]: int32_t = 1065353216
                    uint32: uint32_t[4] = 0x6030001a9770
                        uint32[0]: uint32_t = 0
                        uint32[1]: uint32_t = 0
                        uint32[2]: uint32_t = 0
                        uint32[3]: uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 0x6030001a9770:
                    depth: float = 0
                    stencil: uint32_t = 0
            pClearValues[1]: const VkClearValue = 0x6030001a9780 (Union):
                color: VkClearColorValue = 0x6030001a9780 (Union):
                    float32: float[4] = 0x6030001a9780
                        float32[0]: float = 1
                        float32[1]: float = 0
                        float32[2]: float = 1.94102e-29
                        float32[3]: float = 1.4013e-45
                    int32: int32_t[4] = 0x6030001a9780
                        int32[0]: int32_t = 1065353216
                        int32[1]: int32_t = 0
                        int32[2]: int32_t = 264558511
                        int32[3]: int32_t = 1
                    uint32: uint32_t[4] = 0x6030001a9780
                        uint32[0]: uint32_t = 1065353216
                        uint32[1]: uint32_t = 0
                        uint32[2]: uint32_t = 264558511
                        uint32[3]: uint32_t = 1
                depthStencil: VkClearDepthStencilValue = 0x6030001a9780:
                    depth: float = 1
                    stencil: uint32_t = 0
    pSubpassBeginInfo: const VkSubpassBeginInfo* = 0x7ffedffdb6b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO (1000109005)
        pNext: const void* = NULL
        contents: VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb190:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline: VkPipeline = 0x61b00002ae80

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    firstBinding: uint32_t = 0
    bindingCount: uint32_t = 1
    pBuffers: const VkBuffer* = 0x7ffedffdb1f0
        pBuffers[0]: const VkBuffer = 0x60f000021010
    pOffsets: const VkDeviceSize* = 0x7ffedffdb700
        pOffsets[0]: const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    buffer: VkBuffer = 0x60f0000211f0
    offset: VkDeviceSize = 0
    indexType: VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout: VkPipelineLayout = 0x614000024440
    firstSet: uint32_t = 0
    descriptorSetCount: uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 0x7ffedffdb1a0
        pDescriptorSets[0]: const VkDescriptorSet = 0x61300003eb00
    dynamicOffsetCount: uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    indexCount: uint32_t = 11484
    instanceCount: uint32_t = 1
    firstIndex: uint32_t = 0
    vertexOffset: int32_t = 0
    firstInstance: uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo) returns void:
    commandBuffer: VkCommandBuffer = 0x611000074598
    pSubpassEndInfo: const VkSubpassEndInfo* = 0x7ffedffdb760:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO (1000109006)
        pNext: const void* = NULL

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000074598

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb4b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 0
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    pRenderPassBegin: const VkRenderPassBeginInfo* = 0x7ffedffdb2f8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext: const void* = NULL
        renderPass: VkRenderPass = 0x60b000059c70
        framebuffer: VkFramebuffer = 0x60b00005c9d0
        renderArea: VkRect2D = 0x7ffedffdb318:
            offset: VkOffset2D = 0x7ffedffdb318:
                x: int32_t = 0
                y: int32_t = 0
            extent: VkExtent2D = 0x7ffedffdb320:
                width: uint32_t = 2560
                height: uint32_t = 1440
        clearValueCount: uint32_t = 2
        pClearValues: const VkClearValue* = 0x6030001a9920
            pClearValues[0]: const VkClearValue = 0x6030001a9920 (Union):
                color: VkClearColorValue = 0x6030001a9920 (Union):
                    float32: float[4] = 0x6030001a9920
                        float32[0]: float = 0
                        float32[1]: float = 0
                        float32[2]: float = 0
                        float32[3]: float = 1
                    int32: int32_t[4] = 0x6030001a9920
                        int32[0]: int32_t = 0
                        int32[1]: int32_t = 0
                        int32[2]: int32_t = 0
                        int32[3]: int32_t = 1065353216
                    uint32: uint32_t[4] = 0x6030001a9920
                        uint32[0]: uint32_t = 0
                        uint32[1]: uint32_t = 0
                        uint32[2]: uint32_t = 0
                        uint32[3]: uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 0x6030001a9920:
                    depth: float = 0
                    stencil: uint32_t = 0
            pClearValues[1]: const VkClearValue = 0x6030001a9930 (Union):
                color: VkClearColorValue = 0x6030001a9930 (Union):
                    float32: float[4] = 0x6030001a9930
                        float32[0]: float = 1
                        float32[1]: float = 0
                        float32[2]: float = 1.94102e-29
                        float32[3]: float = 1.4013e-45
                    int32: int32_t[4] = 0x6030001a9930
                        int32[0]: int32_t = 1065353216
                        int32[1]: int32_t = 0
                        int32[2]: int32_t = 264558511
                        int32[3]: int32_t = 1
                    uint32: uint32_t[4] = 0x6030001a9930
                        uint32[0]: uint32_t = 1065353216
                        uint32[1]: uint32_t = 0
                        uint32[2]: uint32_t = 264558511
                        uint32[3]: uint32_t = 1
                depthStencil: VkClearDepthStencilValue = 0x6030001a9930:
                    depth: float = 1
                    stencil: uint32_t = 0
    pSubpassBeginInfo: const VkSubpassBeginInfo* = 0x7ffedffdb6b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO (1000109005)
        pNext: const void* = NULL
        contents: VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb190:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline: VkPipeline = 0x61b00002ae80

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    firstBinding: uint32_t = 0
    bindingCount: uint32_t = 1
    pBuffers: const VkBuffer* = 0x7ffedffdb1f0
        pBuffers[0]: const VkBuffer = 0x60f000021010
    pOffsets: const VkDeviceSize* = 0x7ffedffdb700
        pOffsets[0]: const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    buffer: VkBuffer = 0x60f0000211f0
    offset: VkDeviceSize = 0
    indexType: VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout: VkPipelineLayout = 0x614000024440
    firstSet: uint32_t = 0
    descriptorSetCount: uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 0x7ffedffdb1a0
        pDescriptorSets[0]: const VkDescriptorSet = 0x61300003eb00
    dynamicOffsetCount: uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    indexCount: uint32_t = 11484
    instanceCount: uint32_t = 1
    firstIndex: uint32_t = 0
    vertexOffset: int32_t = 0
    firstInstance: uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo) returns void:
    commandBuffer: VkCommandBuffer = 0x611000080ed8
    pSubpassEndInfo: const VkSubpassEndInfo* = 0x7ffedffdb760:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO (1000109006)
        pNext: const void* = NULL

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000080ed8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000081018
    pBeginInfo: const VkCommandBufferBeginInfo* = 0x7ffedffdb4b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext: const void* = NULL
        flags: VkCommandBufferUsageFlags = 0
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    pRenderPassBegin: const VkRenderPassBeginInfo* = 0x7ffedffdb2f8:
        sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext: const void* = NULL
        renderPass: VkRenderPass = 0x60b000059c70
        framebuffer: VkFramebuffer = 0x60b00005ca80
        renderArea: VkRect2D = 0x7ffedffdb318:
            offset: VkOffset2D = 0x7ffedffdb318:
                x: int32_t = 0
                y: int32_t = 0
            extent: VkExtent2D = 0x7ffedffdb320:
                width: uint32_t = 2560
                height: uint32_t = 1440
        clearValueCount: uint32_t = 2
        pClearValues: const VkClearValue* = 0x6030001a9ad0
            pClearValues[0]: const VkClearValue = 0x6030001a9ad0 (Union):
                color: VkClearColorValue = 0x6030001a9ad0 (Union):
                    float32: float[4] = 0x6030001a9ad0
                        float32[0]: float = 0
                        float32[1]: float = 0
                        float32[2]: float = 0
                        float32[3]: float = 1
                    int32: int32_t[4] = 0x6030001a9ad0
                        int32[0]: int32_t = 0
                        int32[1]: int32_t = 0
                        int32[2]: int32_t = 0
                        int32[3]: int32_t = 1065353216
                    uint32: uint32_t[4] = 0x6030001a9ad0
                        uint32[0]: uint32_t = 0
                        uint32[1]: uint32_t = 0
                        uint32[2]: uint32_t = 0
                        uint32[3]: uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 0x6030001a9ad0:
                    depth: float = 0
                    stencil: uint32_t = 0
            pClearValues[1]: const VkClearValue = 0x6030001a9ae0 (Union):
                color: VkClearColorValue = 0x6030001a9ae0 (Union):
                    float32: float[4] = 0x6030001a9ae0
                        float32[0]: float = 1
                        float32[1]: float = 0
                        float32[2]: float = 1.94102e-29
                        float32[3]: float = 1.4013e-45
                    int32: int32_t[4] = 0x6030001a9ae0
                        int32[0]: int32_t = 1065353216
                        int32[1]: int32_t = 0
                        int32[2]: int32_t = 264558511
                        int32[3]: int32_t = 1
                    uint32: uint32_t[4] = 0x6030001a9ae0
                        uint32[0]: uint32_t = 1065353216
                        uint32[1]: uint32_t = 0
                        uint32[2]: uint32_t = 264558511
                        uint32[3]: uint32_t = 1
                depthStencil: VkClearDepthStencilValue = 0x6030001a9ae0:
                    depth: float = 1
                    stencil: uint32_t = 0
    pSubpassBeginInfo: const VkSubpassBeginInfo* = 0x7ffedffdb6b0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO (1000109005)
        pNext: const void* = NULL
        contents: VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice: VkPhysicalDevice = 0x60300017bae0
    format: VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties: VkFormatProperties* = 0x7ffedffdb190:
        linearTilingFeatures: VkFormatFeatureFlags = 54275 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        optimalTilingFeatures: VkFormatFeatureFlags = 56707 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT)
        bufferFeatures: VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline: VkPipeline = 0x61b00002ae80

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    firstBinding: uint32_t = 0
    bindingCount: uint32_t = 1
    pBuffers: const VkBuffer* = 0x7ffedffdb1f0
        pBuffers[0]: const VkBuffer = 0x60f000021010
    pOffsets: const VkDeviceSize* = 0x7ffedffdb700
        pOffsets[0]: const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    buffer: VkBuffer = 0x60f0000211f0
    offset: VkDeviceSize = 0
    indexType: VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout: VkPipelineLayout = 0x614000024440
    firstSet: uint32_t = 0
    descriptorSetCount: uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 0x7ffedffdb1a0
        pDescriptorSets[0]: const VkDescriptorSet = 0x61300003eb00
    dynamicOffsetCount: uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    indexCount: uint32_t = 11484
    instanceCount: uint32_t = 1
    firstIndex: uint32_t = 0
    vertexOffset: int32_t = 0
    firstInstance: uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo) returns void:
    commandBuffer: VkCommandBuffer = 0x611000081018
    pSubpassEndInfo: const VkSubpassEndInfo* = 0x7ffedffdb760:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO (1000109006)
        pNext: const void* = NULL

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer: VkCommandBuffer = 0x611000081018

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkSemaphoreCreateInfo* = 0x7ffedffdb7e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext: const void* = NULL
        flags: VkSemaphoreCreateFlags = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore: VkSemaphore* = 0x6040002190d0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkSemaphoreCreateInfo* = 0x7ffedffdb7e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext: const void* = NULL
        flags: VkSemaphoreCreateFlags = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore: VkSemaphore* = 0x604000219190

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkFenceCreateInfo* = 0x7ffedffdb830:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext: const void* = NULL
        flags: VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator: const VkAllocationCallbacks* = NULL
    pFence: VkFence* = 0x60e00003cf00

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkSemaphoreCreateInfo* = 0x7ffedffdb7e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext: const void* = NULL
        flags: VkSemaphoreCreateFlags = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore: VkSemaphore* = 0x604000219290

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkSemaphoreCreateInfo* = 0x7ffedffdb7e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext: const void* = NULL
        flags: VkSemaphoreCreateFlags = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore: VkSemaphore* = 0x604000219350

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    pCreateInfo: const VkFenceCreateInfo* = 0x7ffedffdb830:
        sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext: const void* = NULL
        flags: VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator: const VkAllocationCallbacks* = NULL
    pFence: VkFence* = 0x60e00003cfe0

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005cad8
        pSubmits[0]: const VkSubmitInfo = 0x60700005cad8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200005eb10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200005eb30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200005eb50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200005eb70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 0:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a7100:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200005ed90
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200005edb0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200005edd0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 1:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 1:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 1:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 1:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 1:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 1:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 1:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005cc98
        pSubmits[0]: const VkSubmitInfo = 0x60700005cc98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200005ef30
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200005ef50
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200005ef70
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200005ef90
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 1:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a76a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000061150
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000061170
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000061190
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 2:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 2:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 2:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 2:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 2:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 2:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005ce58
        pSubmits[0]: const VkSubmitInfo = 0x60700005ce58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000612f0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000061310
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000061330
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000061350
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 2:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a7ca0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000061510
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000061530
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000061550
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 3:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 3:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 3:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 3:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 3:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 3:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 3:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d018
        pSubmits[0]: const VkSubmitInfo = 0x60700005d018:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000616b0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000616d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000616f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000061710
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 3:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a7e20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000061810
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000061830
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000061850
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 4:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 4:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 4:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 4:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 4:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 4:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d0f8
        pSubmits[0]: const VkSubmitInfo = 0x60700005d0f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000061970
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000061990
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000619b0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000619d0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 4:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a7fa0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000061ad0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000061af0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000061b10
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 5:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 5:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 5:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 5:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 5:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 5:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 5:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d1d8
        pSubmits[0]: const VkSubmitInfo = 0x60700005d1d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000061c30
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000061c50
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000061c70
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000061c90
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 5:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8120:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000061d90
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000061db0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000061dd0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 6:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 6:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 6:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 6:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 6:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 6:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 6:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d2b8
        pSubmits[0]: const VkSubmitInfo = 0x60700005d2b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000061ef0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000061f10
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000061f30
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000061f50
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 6:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a82a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000063050
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000063070
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000063090
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 7:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 7:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 7:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 7:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 7:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 7:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 7:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d398
        pSubmits[0]: const VkSubmitInfo = 0x60700005d398:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000631b0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000631d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000631f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000063210
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 7:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8420:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000063330
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000063350
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000063370
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 8:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 8:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 8:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 8:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 8:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 8:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 8:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d478
        pSubmits[0]: const VkSubmitInfo = 0x60700005d478:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000634d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000634f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000063510
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000063530
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 8:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a85a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000063610
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000063630
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000063650
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 9:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 9:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 9:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 9:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 9:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 9:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 9:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d558
        pSubmits[0]: const VkSubmitInfo = 0x60700005d558:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000637b0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000637d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000637f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000063810
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 9:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8720:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000063910
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000063930
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000063950
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 10:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 10:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 10:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 10:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 10:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 10:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 10:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d638
        pSubmits[0]: const VkSubmitInfo = 0x60700005d638:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000063ab0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000063ad0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000063af0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000063b10
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 10:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a88a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000063c10
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000063c30
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000063c50
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 11:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 11:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 11:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 11:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 11:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 11:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 11:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d718
        pSubmits[0]: const VkSubmitInfo = 0x60700005d718:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000063db0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000063dd0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000063df0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000063e10
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 11:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8a20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000063f10
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000063f30
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000063f50
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 12:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 12:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 12:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 12:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 12:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 12:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 12:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d7f8
        pSubmits[0]: const VkSubmitInfo = 0x60700005d7f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000640b0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000640d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000640f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000064110
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 12:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8ba0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000064210
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000064230
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000064250
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 13:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 13:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 13:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 13:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 13:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 13:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 13:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d8d8
        pSubmits[0]: const VkSubmitInfo = 0x60700005d8d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000643b0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000643d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000643f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000064410
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 13:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8d20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000064510
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000064530
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000064550
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 14:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 14:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 14:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 14:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 14:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 14:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 14:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005d9b8
        pSubmits[0]: const VkSubmitInfo = 0x60700005d9b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000646b0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000646d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000646f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000064710
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 14:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a8ea0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000064810
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000064830
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000064850
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 15:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 15:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 15:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 15:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 15:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 15:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 15:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005da98
        pSubmits[0]: const VkSubmitInfo = 0x60700005da98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000649b0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000649d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000649f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000064a10
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 15:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a9020:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000064b10
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000064b30
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000064b50
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 16:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 16:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 16:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 16:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 16:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 16:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 16:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005db78
        pSubmits[0]: const VkSubmitInfo = 0x60700005db78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000064cb0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000064cd0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000064cf0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000064d10
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 16:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a91a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000064e10
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000064e30
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000064e50
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 17:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 17:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 17:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 17:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 17:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 17:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 17:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005dc58
        pSubmits[0]: const VkSubmitInfo = 0x60700005dc58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000064fd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000064ff0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000066010
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000066030
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 17:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a9320:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000066130
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000066150
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000066170
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 18:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 18:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 18:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 18:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 18:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 18:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 18:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005dd38
        pSubmits[0]: const VkSubmitInfo = 0x60700005dd38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000662d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000662f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000066310
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000066330
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 18:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a94a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000066430
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000066450
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000066470
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 19:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 19:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 19:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 19:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 19:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 19:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 19:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005de18
        pSubmits[0]: const VkSubmitInfo = 0x60700005de18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000665d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000665f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000066610
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000066630
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 19:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a9620:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000066730
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000066750
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000066770
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 20:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 20:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 20:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 20:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 20:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 20:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 20:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700005def8
        pSubmits[0]: const VkSubmitInfo = 0x60700005def8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000668d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000668f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000066910
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000066930
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 20:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a97a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000066a30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000066a50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000066a70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 21:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 21:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 21:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 21:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 21:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 21:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 21:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000637c8
        pSubmits[0]: const VkSubmitInfo = 0x6070000637c8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000066bd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000066bf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000066c10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000066c30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 21:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a9920:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000066d30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000066d50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000066d70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 22:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 22:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 22:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 22:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 22:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 22:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 22:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000638a8
        pSubmits[0]: const VkSubmitInfo = 0x6070000638a8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000066ed0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000066ef0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000066f10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000066f30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 22:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a9aa0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000067030
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000067050
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000067070
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 23:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 23:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 23:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 23:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 23:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 23:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 23:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000063988
        pSubmits[0]: const VkSubmitInfo = 0x607000063988:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000671f0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000067210
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000067230
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000067250
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 23:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002a9c20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000067350
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000067370
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000067390
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 24:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 24:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 24:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 24:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 24:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 24:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 24:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000064da8
        pSubmits[0]: const VkSubmitInfo = 0x607000064da8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000067f10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000067f30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000067f50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000067f70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 24:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ab720:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000068070
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000068090
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000680b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 25:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 25:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 25:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 25:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 25:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 25:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 25:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065198
        pSubmits[0]: const VkSubmitInfo = 0x607000065198:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000682f0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000068310
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000068330
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000068350
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 25:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ab960:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000068450
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000068470
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000068490
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 26:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 26:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 26:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 26:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 26:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 26:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 26:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065278
        pSubmits[0]: const VkSubmitInfo = 0x607000065278:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000685f0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000068610
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000068630
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000068650
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 26:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002abae0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000068750
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000068770
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000068790
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 27:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 27:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 27:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 27:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 27:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 27:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 27:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065358
        pSubmits[0]: const VkSubmitInfo = 0x607000065358:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000688f0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000068910
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000068930
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000068950
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 27:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002abc60:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000068a50
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000068a70
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000068a90
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 28:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 28:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 28:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 28:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 28:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 28:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 28:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065438
        pSubmits[0]: const VkSubmitInfo = 0x607000065438:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000068bf0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000068c10
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000068c30
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000068c50
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 28:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002abde0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000068d50
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000068d70
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000068d90
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 29:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 29:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 29:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 29:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 29:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 29:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 29:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065518
        pSubmits[0]: const VkSubmitInfo = 0x607000065518:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000068ef0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000068f10
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000068f30
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000068f50
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 29:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002abf60:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006a050
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006a070
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006a090
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 30:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 30:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 30:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 30:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 30:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 30:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 30:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000655f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000655f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006a1f0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006a210
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006a230
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006a250
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 30:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac0e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006a370
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006a390
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006a3b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 31:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 31:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 31:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 31:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 31:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 31:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 31:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000656d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000656d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006a510
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006a530
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006a550
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006a570
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 31:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac260:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006a670
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006a690
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006a6b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 32:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 32:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 32:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 32:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 32:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 32:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 32:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000657b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000657b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006a810
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006a830
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006a850
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006a870
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 32:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac3e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006a970
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006a990
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006a9b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 33:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 33:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 33:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 33:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 33:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 33:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 33:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065898
        pSubmits[0]: const VkSubmitInfo = 0x607000065898:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006ab10
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006ab30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006ab50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006ab70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 33:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac560:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006ac70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006ac90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006acb0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 34:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 34:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 34:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 34:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 34:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 34:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 34:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065978
        pSubmits[0]: const VkSubmitInfo = 0x607000065978:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006ae10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006ae30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006ae50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006ae70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 34:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac6e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006af70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006af90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006afb0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 35:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 35:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 35:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 35:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 35:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 35:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 35:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065a58
        pSubmits[0]: const VkSubmitInfo = 0x607000065a58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006b0d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006b0f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006b110
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006b130
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 35:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac860:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006b230
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006b250
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006b270
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 36:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 36:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 36:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 36:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 36:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 36:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 36:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065b38
        pSubmits[0]: const VkSubmitInfo = 0x607000065b38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006b390
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006b3b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006b3d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006b3f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 36:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ac9e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006b4f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006b510
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006b530
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 37:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 37:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 37:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 37:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 37:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 37:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 37:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065c18
        pSubmits[0]: const VkSubmitInfo = 0x607000065c18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006b650
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006b670
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006b690
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006b6b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 37:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002acb60:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006b7b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006b7d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006b7f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 38:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 38:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 38:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 38:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 38:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 38:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 38:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065cf8
        pSubmits[0]: const VkSubmitInfo = 0x607000065cf8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006b910
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006b930
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006b950
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006b970
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 38:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002acce0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006ba70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006ba90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006bab0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 39:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 39:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 39:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 39:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 39:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 39:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 39:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065dd8
        pSubmits[0]: const VkSubmitInfo = 0x607000065dd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006bbd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006bbf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006bc10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006bc30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 39:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ace60:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006bd30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006bd50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006bd70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 40:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 40:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 40:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 40:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 40:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 40:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 40:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065eb8
        pSubmits[0]: const VkSubmitInfo = 0x607000065eb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006be90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006beb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006bed0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006bef0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 40:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002acfe0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006bff0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006c010
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006c030
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 41:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 41:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 41:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 41:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 41:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 41:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 41:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000065f98
        pSubmits[0]: const VkSubmitInfo = 0x607000065f98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006c150
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006c170
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006c190
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006c1b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 41:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ad160:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006c2b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006c2d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006c2f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 42:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 42:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 42:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 42:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 42:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 42:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 42:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066078
        pSubmits[0]: const VkSubmitInfo = 0x607000066078:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006c450
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006c470
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006c490
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006c4b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 42:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ad2e0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006c5b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006c5d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006c5f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 43:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 43:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 43:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 43:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 43:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 43:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 43:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066158
        pSubmits[0]: const VkSubmitInfo = 0x607000066158:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006c750
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006c770
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006c790
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006c7b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 43:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ad460:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006c8b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006c8d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006c8f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 44:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 44:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 44:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 44:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 44:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 44:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 44:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066238
        pSubmits[0]: const VkSubmitInfo = 0x607000066238:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006cad0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006caf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006cb10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006cb30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 44:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ad640:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006cc30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006cc50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006cc70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 45:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 45:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 45:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 45:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 45:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 45:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 45:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066318
        pSubmits[0]: const VkSubmitInfo = 0x607000066318:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006cdd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006cdf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006ce10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006ce30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 45:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ad7c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006cf30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006cf50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006cf70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 46:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 46:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 46:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 46:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 46:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 46:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 46:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000663f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000663f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006e090
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006e0b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006e0d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006e0f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 46:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ad940:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006e1f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006e210
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006e230
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 47:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 47:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 47:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 47:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 47:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 47:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 47:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000664d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000664d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006e390
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006e3b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006e3d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006e3f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 47:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002adac0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006e4f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006e510
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006e530
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 48:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 48:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 48:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 48:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 48:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 48:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 48:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000665b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000665b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006e690
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006e6b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006e6d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006e6f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 48:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002adc40:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006e7f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006e810
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006e830
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 49:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 49:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 49:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 49:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 49:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 49:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 49:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066698
        pSubmits[0]: const VkSubmitInfo = 0x607000066698:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006e990
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006e9b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006e9d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006e9f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 49:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002addc0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006eaf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006eb10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006eb30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 50:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 50:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 50:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 50:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 50:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 50:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 50:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066778
        pSubmits[0]: const VkSubmitInfo = 0x607000066778:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006ec90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006ecb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006ecd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006ecf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 50:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002adf40:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006edf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006ee10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006ee30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 51:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 51:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 51:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 51:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 51:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 51:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 51:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066858
        pSubmits[0]: const VkSubmitInfo = 0x607000066858:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006ef90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006efb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006efd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006eff0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 51:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae0c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006f110
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006f130
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006f150
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 52:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 52:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 52:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 52:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 52:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 52:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 52:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066938
        pSubmits[0]: const VkSubmitInfo = 0x607000066938:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006f330
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006f350
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006f370
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006f390
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 52:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae240:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006f470
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006f490
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006f4b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 53:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 53:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 53:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 53:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 53:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 53:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 53:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066a18
        pSubmits[0]: const VkSubmitInfo = 0x607000066a18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006f5d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006f5f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006f610
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006f630
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 53:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae3c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006f730
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006f750
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006f770
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 54:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 54:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 54:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 54:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 54:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 54:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 54:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066af8
        pSubmits[0]: const VkSubmitInfo = 0x607000066af8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006f890
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006f8b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006f8d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006f8f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 54:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae540:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006f9f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006fa10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006fa30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 55:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 55:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 55:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 55:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 55:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 55:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 55:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066bd8
        pSubmits[0]: const VkSubmitInfo = 0x607000066bd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006fb90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006fbb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006fbd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006fbf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 55:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae6c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006fcf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006fd10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006fd30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 56:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 56:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 56:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 56:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 56:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 56:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 56:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066cb8
        pSubmits[0]: const VkSubmitInfo = 0x607000066cb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200006fe50
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200006fe70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200006fe90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200006feb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 56:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae840:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200006ffb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200006ffd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200006fff0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 57:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 57:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 57:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 57:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 57:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 57:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 57:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066d98
        pSubmits[0]: const VkSubmitInfo = 0x607000066d98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000070110
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000070130
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000070150
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000070170
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 57:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ae9c0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000070290
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000702b0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000702d0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 58:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 58:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 58:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 58:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 58:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 58:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 58:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066e78
        pSubmits[0]: const VkSubmitInfo = 0x607000066e78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000703f0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000070410
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000070430
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000070450
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 58:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002aeb40:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000070530
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000070550
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000070570
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 59:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 59:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 59:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 59:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 59:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 59:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 59:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000066f58
        pSubmits[0]: const VkSubmitInfo = 0x607000066f58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000070690
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000706b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000706d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000706f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 59:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002aecc0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000707f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000070810
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000070830
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 60:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 60:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 60:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 60:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 60:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 60:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 60:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067038
        pSubmits[0]: const VkSubmitInfo = 0x607000067038:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000070950
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000070970
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000070990
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000709b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 60:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002aee40:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000070ab0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000070ad0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000070af0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 61:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 61:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 61:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 61:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 61:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 61:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 61:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067118
        pSubmits[0]: const VkSubmitInfo = 0x607000067118:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000070c10
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000070c30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000070c50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000070c70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 61:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002aefc0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000070d70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000070d90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000070db0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 62:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 62:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 62:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 62:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 62:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 62:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 62:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000671f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000671f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000070ed0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000070ef0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000070f10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000070f30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 62:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0100:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000072030
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000072050
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000072070
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 63:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 63:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 63:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 63:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 63:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 63:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 63:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000672d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000672d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000072190
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000721b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000721d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000721f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 63:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0280:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000722f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000072310
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000072330
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 64:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 64:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 64:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 64:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 64:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 64:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 64:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000673b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000673b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000072450
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000072470
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000072490
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000724b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 64:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000725b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000725d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000725f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 65:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 65:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 65:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 65:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 65:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 65:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 65:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067498
        pSubmits[0]: const VkSubmitInfo = 0x607000067498:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000072710
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000072730
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000072750
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000072770
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 65:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0580:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000072870
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000072890
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000728b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 66:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 66:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 66:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 66:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 66:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 66:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 66:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067578
        pSubmits[0]: const VkSubmitInfo = 0x607000067578:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000729d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000729f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000072a10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000072a30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 66:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0700:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000072b30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000072b50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000072b70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 67:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 67:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 67:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 67:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 67:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 67:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 67:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067658
        pSubmits[0]: const VkSubmitInfo = 0x607000067658:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000072c90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000072cb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000072cd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000072cf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 67:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0880:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000072df0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000072e10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000072e30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 68:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 68:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 68:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 68:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 68:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 68:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 68:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067738
        pSubmits[0]: const VkSubmitInfo = 0x607000067738:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000072f50
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000072f70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000072f90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000072fb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 68:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0a00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000740b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000740d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000740f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 69:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 69:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 69:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 69:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 69:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 69:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 69:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067818
        pSubmits[0]: const VkSubmitInfo = 0x607000067818:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000074210
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000074230
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000074250
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000074270
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 69:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0b80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000074370
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000074390
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000743b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 70:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 70:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 70:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 70:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 70:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 70:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 70:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000678f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000678f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000744d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000744f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000074510
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000074530
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 70:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0d00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000074630
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000074650
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000074670
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 71:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 71:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 71:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 71:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 71:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 71:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 71:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000679d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000679d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000074790
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000747b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000747d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000747f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 71:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b0e80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000074910
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000074930
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000074950
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 72:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 72:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 72:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 72:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 72:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 72:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 72:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067ab8
        pSubmits[0]: const VkSubmitInfo = 0x607000067ab8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000074a70
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000074a90
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000074ab0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000074ad0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 72:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1000:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000074bb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000074bd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000074bf0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 73:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 73:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 73:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 73:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 73:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 73:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 73:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067b98
        pSubmits[0]: const VkSubmitInfo = 0x607000067b98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000074d10
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000074d30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000074d50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000074d70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 73:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1180:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000074e90
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000074eb0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000074ed0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 74:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 74:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 74:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 74:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 74:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 74:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 74:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067c78
        pSubmits[0]: const VkSubmitInfo = 0x607000067c78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000074ff0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000075010
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000075030
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000075050
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 74:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1300:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000075130
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000075150
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000075170
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 75:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 75:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 75:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 75:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 75:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 75:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 75:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067d58
        pSubmits[0]: const VkSubmitInfo = 0x607000067d58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000075290
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000752b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000752d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000752f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 75:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1480:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000753f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000075410
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000075430
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 76:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 76:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 76:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 76:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 76:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 76:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 76:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067e38
        pSubmits[0]: const VkSubmitInfo = 0x607000067e38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000075550
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000075570
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000075590
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000755b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 76:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1600:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000756b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000756d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000756f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 77:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 77:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 77:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 77:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 77:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 77:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 77:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067f18
        pSubmits[0]: const VkSubmitInfo = 0x607000067f18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000075810
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000075830
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000075850
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000075870
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 77:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1780:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000075970
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000075990
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000759b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 78:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 78:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 78:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 78:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 78:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 78:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 78:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000067ff8
        pSubmits[0]: const VkSubmitInfo = 0x607000067ff8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000075ad0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000075af0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000075b10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000075b30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 78:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1900:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000075c30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000075c50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000075c70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 79:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 79:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 79:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 79:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 79:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 79:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 79:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000680d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000680d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000075d90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000075db0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000075dd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000075df0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 79:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1a80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000075f10
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000075f30
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000075f50
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 80:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 80:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 80:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 80:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 80:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 80:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 80:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000681b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000681b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000076070
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000076090
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000760b0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000760d0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 80:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1c00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000761b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000761d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000761f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 81:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 81:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 81:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 81:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 81:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 81:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 81:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068298
        pSubmits[0]: const VkSubmitInfo = 0x607000068298:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000076310
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000076330
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000076350
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000076370
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 81:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1d80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000076470
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000076490
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000764b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 82:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 82:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 82:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 82:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 82:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 82:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 82:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068378
        pSubmits[0]: const VkSubmitInfo = 0x607000068378:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000765d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000765f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000076610
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000076630
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 82:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b1f00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000076730
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000076750
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000076770
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 83:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 83:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 83:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 83:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 83:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 83:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 83:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068458
        pSubmits[0]: const VkSubmitInfo = 0x607000068458:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000076890
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000768b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000768d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000768f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 83:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2080:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000769f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000076a10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000076a30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 84:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 84:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 84:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 84:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 84:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 84:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 84:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068538
        pSubmits[0]: const VkSubmitInfo = 0x607000068538:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000076b50
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000076b70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000076b90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000076bb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 84:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2200:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000076cd0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000076cf0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000076d10
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 85:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 85:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 85:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 85:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 85:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 85:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 85:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068618
        pSubmits[0]: const VkSubmitInfo = 0x607000068618:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000076e30
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000076e50
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000076e70
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000076e90
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 85:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000076f70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000076f90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000076fb0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 86:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 86:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 86:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 86:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 86:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 86:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 86:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000686f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000686f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000770d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000770f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000077110
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000077130
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 86:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2500:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000077230
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000077250
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000077270
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 87:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 87:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 87:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 87:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 87:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 87:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 87:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000687d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000687d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000077390
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000773b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000773d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000773f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 87:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2680:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000774f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000077510
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000077530
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 88:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 88:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 88:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 88:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 88:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 88:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 88:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000688b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000688b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000077650
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000077670
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000077690
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000776b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 88:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2800:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000777b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000777d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000777f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 89:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 89:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 89:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 89:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 89:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 89:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 89:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068998
        pSubmits[0]: const VkSubmitInfo = 0x607000068998:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000077910
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000077930
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000077950
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000077970
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 89:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2980:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000077a70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000077a90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000077ab0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 90:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 90:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 90:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 90:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 90:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 90:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 90:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068a78
        pSubmits[0]: const VkSubmitInfo = 0x607000068a78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000077bd0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000077bf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000077c10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000077c30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 90:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2b00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000077d30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000077d50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000077d70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 91:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 91:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 91:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 91:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 91:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 91:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 91:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068b58
        pSubmits[0]: const VkSubmitInfo = 0x607000068b58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000077e90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000077eb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000077ed0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000077ef0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 91:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2c80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000077ff0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000078010
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000078030
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 92:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 92:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 92:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 92:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 92:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 92:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 92:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068c38
        pSubmits[0]: const VkSubmitInfo = 0x607000068c38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000078150
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000078170
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000078190
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000781b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 92:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2e00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000782b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000782d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000782f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 93:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 93:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 93:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 93:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 93:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 93:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 93:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068d18
        pSubmits[0]: const VkSubmitInfo = 0x607000068d18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000078410
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000078430
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000078450
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000078470
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 93:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b2f80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000078570
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000078590
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000785b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 94:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 94:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 94:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 94:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 94:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 94:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 94:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068df8
        pSubmits[0]: const VkSubmitInfo = 0x607000068df8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000786d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000786f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000078710
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000078730
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 94:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3100:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000078830
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000078850
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000078870
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 95:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 95:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 95:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 95:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 95:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 95:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 95:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068ed8
        pSubmits[0]: const VkSubmitInfo = 0x607000068ed8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000078990
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000789b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000789d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000789f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 95:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3280:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000078af0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000078b10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000078b30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 96:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 96:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 96:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 96:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 96:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 96:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 96:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000068fb8
        pSubmits[0]: const VkSubmitInfo = 0x607000068fb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000078c50
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000078c70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000078c90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000078cb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 96:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000078db0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000078dd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000078df0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 97:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 97:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 97:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 97:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 97:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 97:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 97:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069098
        pSubmits[0]: const VkSubmitInfo = 0x607000069098:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000078f10
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000078f30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000078f50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000078f70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 97:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3580:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000079070
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000079090
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000790b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 98:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 98:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 98:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 98:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 98:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 98:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 98:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069178
        pSubmits[0]: const VkSubmitInfo = 0x607000069178:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000791d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000791f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000079210
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000079230
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 98:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3700:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000079330
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000079350
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000079370
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 99:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 99:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 99:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 99:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 99:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 99:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 99:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069258
        pSubmits[0]: const VkSubmitInfo = 0x607000069258:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000079490
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000794b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000794d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000794f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 99:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3880:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000795f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000079610
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000079630
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 100:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 100:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 100:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 100:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 100:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 100:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 100:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069338
        pSubmits[0]: const VkSubmitInfo = 0x607000069338:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000079750
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000079770
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000079790
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000797b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 100:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3a00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000798b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000798d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000798f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 101:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 101:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 101:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 101:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 101:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 101:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 101:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069418
        pSubmits[0]: const VkSubmitInfo = 0x607000069418:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000079a10
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000079a30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000079a50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000079a70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 101:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3b80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000079b70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000079b90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000079bb0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 102:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 102:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 102:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 102:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 102:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 102:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 102:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000694f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000694f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000079cd0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000079cf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000079d10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000079d30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 102:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3d00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000079e30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000079e50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000079e70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 103:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 103:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 103:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 103:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 103:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 103:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 103:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000695d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000695d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000079f90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000079fb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000079fd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000079ff0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 103:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b3e80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007a0f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007a110
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007a130
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 104:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 104:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 104:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 104:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 104:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 104:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 104:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000696b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000696b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007a250
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007a270
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007a290
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007a2b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 104:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4000:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007a3b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007a3d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007a3f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 105:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 105:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 105:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 105:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 105:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 105:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 105:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069798
        pSubmits[0]: const VkSubmitInfo = 0x607000069798:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007a510
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007a530
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007a550
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007a570
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 105:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4180:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007a670
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007a690
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007a6b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 106:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 106:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 106:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 106:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 106:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 106:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 106:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069878
        pSubmits[0]: const VkSubmitInfo = 0x607000069878:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007a7d0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007a7f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007a810
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007a830
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 106:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4300:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007a930
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007a950
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007a970
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 107:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 107:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 107:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 107:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 107:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 107:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 107:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069958
        pSubmits[0]: const VkSubmitInfo = 0x607000069958:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007aa90
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007aab0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007aad0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007aaf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 107:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4480:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007abf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007ac10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007ac30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 108:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 108:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 108:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 108:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 108:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 108:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 108:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069b18
        pSubmits[0]: const VkSubmitInfo = 0x607000069b18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007ae10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007ae30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007ae50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007ae70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 108:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4780:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007af70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007af90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007afb0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 109:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 109:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 109:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 109:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 109:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 109:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 109:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069bf8
        pSubmits[0]: const VkSubmitInfo = 0x607000069bf8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007b0d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007b0f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007b110
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007b130
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 109:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4900:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007b230
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007b250
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007b270
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 110:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 110:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 110:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 110:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 110:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 110:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 110:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069cd8
        pSubmits[0]: const VkSubmitInfo = 0x607000069cd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007b390
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007b3b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007b3d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007b3f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 110:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4a80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007b510
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007b530
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007b550
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 111:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 111:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 111:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 111:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 111:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 111:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 111:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069db8
        pSubmits[0]: const VkSubmitInfo = 0x607000069db8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007b670
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007b690
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007b6b0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007b6d0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 111:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4c00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007b7b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007b7d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007b7f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 112:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 112:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 112:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 112:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 112:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 112:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 112:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069e98
        pSubmits[0]: const VkSubmitInfo = 0x607000069e98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007b910
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007b930
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007b950
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007b970
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 112:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4d80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007ba70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007ba90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007bab0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 113:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 113:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 113:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 113:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 113:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 113:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 113:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000069f78
        pSubmits[0]: const VkSubmitInfo = 0x607000069f78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007bbd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007bbf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007bc10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007bc30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 113:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b4f00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007bd30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007bd50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007bd70
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 114:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 114:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 114:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 114:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 114:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 114:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 114:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a058
        pSubmits[0]: const VkSubmitInfo = 0x60700006a058:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007be90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007beb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007bed0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007bef0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 114:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5080:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007bff0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007c010
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007c030
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 115:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 115:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 115:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 115:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 115:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 115:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 115:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a138
        pSubmits[0]: const VkSubmitInfo = 0x60700006a138:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007c150
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007c170
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007c190
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007c1b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 115:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5200:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007c2b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007c2d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007c2f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 116:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 116:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 116:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 116:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 116:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 116:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 116:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a218
        pSubmits[0]: const VkSubmitInfo = 0x60700006a218:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007c410
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007c430
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007c450
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007c470
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 116:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007c570
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007c590
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007c5b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 117:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 117:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 117:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 117:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 117:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 117:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 117:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a2f8
        pSubmits[0]: const VkSubmitInfo = 0x60700006a2f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007c6d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007c6f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007c710
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007c730
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 117:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5500:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007c830
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007c850
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007c870
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 118:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 118:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 118:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 118:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 118:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 118:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 118:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a3d8
        pSubmits[0]: const VkSubmitInfo = 0x60700006a3d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007c990
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007c9b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007c9d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007c9f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 118:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5680:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007caf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007cb10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007cb30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 119:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 119:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 119:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 119:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 119:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 119:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 119:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a4b8
        pSubmits[0]: const VkSubmitInfo = 0x60700006a4b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007cc50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007cc70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007cc90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007ccb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 119:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5800:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007cdb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007cdd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007cdf0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 120:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 120:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 120:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 120:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 120:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 120:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 120:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a598
        pSubmits[0]: const VkSubmitInfo = 0x60700006a598:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007cf10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007cf30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007cf50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007cf70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 120:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5980:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007d070
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007d090
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007d0b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 121:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 121:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 121:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 121:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 121:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 121:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 121:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a678
        pSubmits[0]: const VkSubmitInfo = 0x60700006a678:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007d1d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007d1f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007d210
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007d230
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 121:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5b00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007d330
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007d350
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007d370
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 122:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 122:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 122:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 122:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 122:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 122:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 122:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a758
        pSubmits[0]: const VkSubmitInfo = 0x60700006a758:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007d490
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007d4b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007d4d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007d4f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 122:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5c80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007d5f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007d610
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007d630
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 123:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 123:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 123:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 123:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 123:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 123:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 123:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a838
        pSubmits[0]: const VkSubmitInfo = 0x60700006a838:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007d750
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007d770
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007d790
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007d7b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 123:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5e00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007d8b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007d8d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007d8f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 124:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 124:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 124:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 124:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 124:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 124:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 124:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a918
        pSubmits[0]: const VkSubmitInfo = 0x60700006a918:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007da10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007da30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007da50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007da70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 124:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b5f80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007db70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007db90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007dbb0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 125:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 125:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 125:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 125:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 125:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 125:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 125:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006a9f8
        pSubmits[0]: const VkSubmitInfo = 0x60700006a9f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007dcd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007dcf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007dd10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007dd30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 125:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6100:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007de30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007de50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007de70
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 126:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 126:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 126:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 126:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 126:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 126:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 126:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006aad8
        pSubmits[0]: const VkSubmitInfo = 0x60700006aad8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007df90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007dfb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007dfd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007dff0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 126:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6280:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007e0f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007e110
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007e130
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 127:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 127:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 127:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 127:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 127:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 127:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 127:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006abb8
        pSubmits[0]: const VkSubmitInfo = 0x60700006abb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007e250
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007e270
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007e290
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007e2b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 127:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007e3b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007e3d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007e3f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 128:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 128:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 128:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 128:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 128:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 128:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 128:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ac98
        pSubmits[0]: const VkSubmitInfo = 0x60700006ac98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007e510
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007e530
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007e550
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007e570
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 128:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6580:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007e670
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007e690
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007e6b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 129:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 129:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 129:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 129:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 129:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 129:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 129:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ad78
        pSubmits[0]: const VkSubmitInfo = 0x60700006ad78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007e7d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007e7f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007e810
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007e830
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 129:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6700:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007e930
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007e950
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007e970
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 130:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 130:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 130:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 130:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 130:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 130:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 130:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ae58
        pSubmits[0]: const VkSubmitInfo = 0x60700006ae58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007ea90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007eab0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007ead0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007eaf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 130:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6880:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007ebf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007ec10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007ec30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 131:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 131:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 131:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 131:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 131:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 131:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 131:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006af38
        pSubmits[0]: const VkSubmitInfo = 0x60700006af38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200007ed50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200007ed70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200007ed90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200007edb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 131:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6a00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200007eeb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200007eed0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200007eef0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 132:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 132:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 132:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 132:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 132:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 132:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 132:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b018
        pSubmits[0]: const VkSubmitInfo = 0x60700006b018:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000080010
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000080030
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000080050
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000080070
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 132:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6b80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000080170
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000080190
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000801b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 133:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 133:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 133:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 133:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 133:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 133:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 133:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b0f8
        pSubmits[0]: const VkSubmitInfo = 0x60700006b0f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000802d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000802f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000080310
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000080330
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 133:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6d00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000080450
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000080470
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000080490
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 134:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 134:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 134:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 134:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 134:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 134:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 134:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b1d8
        pSubmits[0]: const VkSubmitInfo = 0x60700006b1d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000805b0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000805d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000805f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000080610
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 134:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b6e80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000806f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000080710
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000080730
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 135:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 135:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 135:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 135:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 135:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 135:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 135:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b2b8
        pSubmits[0]: const VkSubmitInfo = 0x60700006b2b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000080850
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000080870
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000080890
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000808b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 135:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7000:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000809b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000809d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000809f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 136:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 136:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 136:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 136:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 136:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 136:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 136:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b398
        pSubmits[0]: const VkSubmitInfo = 0x60700006b398:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000080b10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000080b30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000080b50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000080b70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 136:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7180:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000080c70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000080c90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000080cb0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 137:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 137:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 137:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 137:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 137:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 137:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 137:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b478
        pSubmits[0]: const VkSubmitInfo = 0x60700006b478:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000080dd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000080df0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000080e10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000080e30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 137:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7300:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000080f30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000080f50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000080f70
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 138:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 138:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 138:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 138:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 138:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 138:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 138:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b558
        pSubmits[0]: const VkSubmitInfo = 0x60700006b558:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000082090
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000820b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000820d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000820f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 138:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7480:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000821f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000082210
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000082230
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 139:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 139:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 139:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 139:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 139:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 139:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 139:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b638
        pSubmits[0]: const VkSubmitInfo = 0x60700006b638:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000082350
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000082370
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000082390
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000823b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 139:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7600:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000824b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000824d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000824f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 140:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 140:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 140:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 140:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 140:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 140:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 140:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b718
        pSubmits[0]: const VkSubmitInfo = 0x60700006b718:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000082610
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000082630
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000082650
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000082670
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 140:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7780:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000082770
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000082790
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000827b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 141:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 141:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 141:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 141:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 141:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 141:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 141:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b7f8
        pSubmits[0]: const VkSubmitInfo = 0x60700006b7f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000828d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000828f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000082910
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000082930
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 141:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7900:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000082a30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000082a50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000082a70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 142:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 142:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 142:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 142:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 142:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 142:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 142:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b8d8
        pSubmits[0]: const VkSubmitInfo = 0x60700006b8d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000082b90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000082bb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000082bd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000082bf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 142:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7a80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000082cf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000082d10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000082d30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 143:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 143:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 143:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 143:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 143:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 143:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 143:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006b9b8
        pSubmits[0]: const VkSubmitInfo = 0x60700006b9b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000082e50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000082e70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000082e90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000082eb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 143:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7c00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000082fb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000082fd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000082ff0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 144:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 144:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 144:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 144:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 144:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 144:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 144:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ba98
        pSubmits[0]: const VkSubmitInfo = 0x60700006ba98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000083110
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000083130
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000083150
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000083170
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 144:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7d80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000083290
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000832b0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000832d0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 145:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 145:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 145:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 145:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 145:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 145:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 145:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006bb78
        pSubmits[0]: const VkSubmitInfo = 0x60700006bb78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000833f0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000083410
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000083430
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000083450
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 145:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b7f00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000083530
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000083550
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000083570
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 146:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 146:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 146:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 146:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 146:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 146:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 146:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006bc58
        pSubmits[0]: const VkSubmitInfo = 0x60700006bc58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000083690
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000836b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000836d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000836f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 146:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8080:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000837f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000083810
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000083830
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 147:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 147:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 147:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 147:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 147:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 147:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 147:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006bd38
        pSubmits[0]: const VkSubmitInfo = 0x60700006bd38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000083950
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000083970
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000083990
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000839b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 147:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8200:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000083ab0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000083ad0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000083af0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 148:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 148:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 148:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 148:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 148:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 148:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 148:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006be18
        pSubmits[0]: const VkSubmitInfo = 0x60700006be18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000083c10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000083c30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000083c50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000083c70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 148:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000083d70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000083d90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000083db0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 149:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 149:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 149:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 149:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 149:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 149:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 149:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006bef8
        pSubmits[0]: const VkSubmitInfo = 0x60700006bef8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000083ed0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000083ef0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000083f10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000083f30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 149:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8500:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000085050
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000085070
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000085090
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 150:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 150:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 150:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 150:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 150:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 150:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 150:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006bfd8
        pSubmits[0]: const VkSubmitInfo = 0x60700006bfd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000851b0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000851d0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000851f0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000085210
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 150:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8680:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000852f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000085310
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000085330
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 151:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 151:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 151:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 151:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 151:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 151:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 151:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c0b8
        pSubmits[0]: const VkSubmitInfo = 0x60700006c0b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000085450
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000085470
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000085490
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000854b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 151:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8800:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000855b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000855d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000855f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 152:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 152:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 152:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 152:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 152:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 152:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 152:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c198
        pSubmits[0]: const VkSubmitInfo = 0x60700006c198:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000085710
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000085730
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000085750
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000085770
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 152:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8980:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000085870
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000085890
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000858b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 153:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 153:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 153:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 153:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 153:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 153:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 153:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c278
        pSubmits[0]: const VkSubmitInfo = 0x60700006c278:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000859d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000859f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000085a10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000085a30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 153:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8b00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000085b30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000085b50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000085b70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 154:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 154:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 154:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 154:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 154:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 154:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 154:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c358
        pSubmits[0]: const VkSubmitInfo = 0x60700006c358:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000085c90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000085cb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000085cd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000085cf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 154:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8c80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000085df0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000085e10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000085e30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 155:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 155:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 155:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 155:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 155:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 155:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 155:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c438
        pSubmits[0]: const VkSubmitInfo = 0x60700006c438:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000085f50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000085f70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000085f90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000085fb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 155:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8e00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000860b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000860d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000860f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 156:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 156:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 156:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 156:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 156:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 156:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 156:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c518
        pSubmits[0]: const VkSubmitInfo = 0x60700006c518:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000086210
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000086230
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000086250
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000086270
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 156:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b8f80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000086370
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000086390
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000863b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 157:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 157:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 157:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 157:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 157:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 157:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 157:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c5f8
        pSubmits[0]: const VkSubmitInfo = 0x60700006c5f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000864d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000864f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000086510
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000086530
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 157:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9100:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000086630
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000086650
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000086670
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 158:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 158:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 158:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 158:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 158:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 158:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 158:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c6d8
        pSubmits[0]: const VkSubmitInfo = 0x60700006c6d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000086790
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000867b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000867d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000867f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 158:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9280:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000868f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000086910
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000086930
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 159:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 159:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 159:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 159:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 159:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 159:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 159:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c7b8
        pSubmits[0]: const VkSubmitInfo = 0x60700006c7b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000086a50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000086a70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000086a90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000086ab0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 159:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000086bb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000086bd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000086bf0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 160:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 160:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 160:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 160:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 160:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 160:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 160:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c898
        pSubmits[0]: const VkSubmitInfo = 0x60700006c898:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000086d10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000086d30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000086d50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000086d70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 160:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9580:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000086e90
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000086eb0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000086ed0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 161:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 161:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 161:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 161:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 161:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 161:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 161:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006c978
        pSubmits[0]: const VkSubmitInfo = 0x60700006c978:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000086ff0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000088010
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000088030
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000088050
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 161:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9700:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000088130
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000088150
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000088170
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 162:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 162:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 162:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 162:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 162:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 162:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 162:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ca58
        pSubmits[0]: const VkSubmitInfo = 0x60700006ca58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000088290
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000882b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000882d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000882f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 162:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9880:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000883f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000088410
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000088430
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 163:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 163:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 163:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 163:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 163:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 163:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 163:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006cb38
        pSubmits[0]: const VkSubmitInfo = 0x60700006cb38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000088550
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000088570
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000088590
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000885b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 163:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9a00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000886d0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000886f0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000088710
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 164:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 164:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 164:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 164:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 164:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 164:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 164:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006cc18
        pSubmits[0]: const VkSubmitInfo = 0x60700006cc18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000088830
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000088850
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000088870
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000088890
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 164:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9b80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000088970
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000088990
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000889b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 165:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 165:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 165:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 165:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 165:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 165:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 165:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ccf8
        pSubmits[0]: const VkSubmitInfo = 0x60700006ccf8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000088ad0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000088af0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000088b10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000088b30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 165:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9d00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000088c30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000088c50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000088c70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 166:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 166:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 166:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 166:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 166:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 166:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 166:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006cdd8
        pSubmits[0]: const VkSubmitInfo = 0x60700006cdd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000088d90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000088db0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000088dd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000088df0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 166:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002b9e80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000088ef0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000088f10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000088f30
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 167:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 167:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 167:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 167:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 167:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 167:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 167:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006ceb8
        pSubmits[0]: const VkSubmitInfo = 0x60700006ceb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000089050
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000089070
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000089090
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000890b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 167:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba000:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000891b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000891d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000891f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 168:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 168:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 168:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 168:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 168:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 168:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 168:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006cf98
        pSubmits[0]: const VkSubmitInfo = 0x60700006cf98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000089310
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000089330
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000089350
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000089370
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 168:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba180:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000089470
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000089490
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000894b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 169:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 169:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 169:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 169:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 169:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 169:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 169:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d078
        pSubmits[0]: const VkSubmitInfo = 0x60700006d078:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000895d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000895f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000089610
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000089630
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 169:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba300:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000089730
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000089750
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000089770
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 170:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 170:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 170:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 170:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 170:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 170:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 170:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d158
        pSubmits[0]: const VkSubmitInfo = 0x60700006d158:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000089890
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000898b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000898d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000898f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 170:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba480:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000899f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000089a10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000089a30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 171:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 171:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 171:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 171:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 171:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 171:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 171:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d238
        pSubmits[0]: const VkSubmitInfo = 0x60700006d238:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000089b50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000089b70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000089b90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000089bb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 171:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba600:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000089cb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000089cd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000089cf0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 172:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 172:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 172:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 172:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 172:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 172:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 172:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d318
        pSubmits[0]: const VkSubmitInfo = 0x60700006d318:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000089e10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000089e30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000089e50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000089e70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 172:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba780:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000089f70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000089f90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000089fb0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 173:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 173:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 173:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 173:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 173:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 173:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 173:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d3f8
        pSubmits[0]: const VkSubmitInfo = 0x60700006d3f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008a0d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008a0f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008a110
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008a130
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 173:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002ba900:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008a230
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008a250
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008a270
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 174:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 174:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 174:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 174:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 174:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 174:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 174:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d4d8
        pSubmits[0]: const VkSubmitInfo = 0x60700006d4d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008a390
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008a3b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008a3d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008a3f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 174:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002baa80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008a4f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008a510
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008a530
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 175:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 175:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 175:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 175:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 175:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 175:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 175:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d5b8
        pSubmits[0]: const VkSubmitInfo = 0x60700006d5b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008a650
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008a670
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008a690
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008a6b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 175:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bac00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008a7b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008a7d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008a7f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 176:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 176:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 176:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 176:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 176:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 176:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 176:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d698
        pSubmits[0]: const VkSubmitInfo = 0x60700006d698:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008a910
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008a930
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008a950
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008a970
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 176:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bad80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008aa70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008aa90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008aab0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 177:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 177:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 177:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 177:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 177:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 177:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 177:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d778
        pSubmits[0]: const VkSubmitInfo = 0x60700006d778:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008abd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008abf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008ac10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008ac30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 177:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002baf00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008ad30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008ad50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008ad70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 178:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 178:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 178:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 178:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 178:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 178:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 178:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d858
        pSubmits[0]: const VkSubmitInfo = 0x60700006d858:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008ae90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008aeb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008aed0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008aef0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 178:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb080:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008aff0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008b010
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008b030
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 179:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 179:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 179:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 179:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 179:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 179:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 179:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006d938
        pSubmits[0]: const VkSubmitInfo = 0x60700006d938:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008b150
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008b170
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008b190
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008b1b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 179:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb200:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008b2b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008b2d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008b2f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 180:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 180:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 180:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 180:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 180:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 180:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 180:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006da18
        pSubmits[0]: const VkSubmitInfo = 0x60700006da18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008b410
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008b430
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008b450
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008b470
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 180:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008b570
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008b590
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008b5b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 181:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 181:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 181:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 181:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 181:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 181:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 181:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006daf8
        pSubmits[0]: const VkSubmitInfo = 0x60700006daf8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008b6d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008b6f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008b710
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008b730
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 181:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb500:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008b830
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008b850
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008b870
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 182:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 182:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 182:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 182:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 182:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 182:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 182:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006dbd8
        pSubmits[0]: const VkSubmitInfo = 0x60700006dbd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008b990
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008b9b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008b9d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008b9f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 182:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb680:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008baf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008bb10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008bb30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 183:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 183:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 183:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 183:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 183:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 183:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 183:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006dcb8
        pSubmits[0]: const VkSubmitInfo = 0x60700006dcb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008bc50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008bc70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008bc90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008bcb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 183:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb800:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008bdb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008bdd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008bdf0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 184:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 184:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 184:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 184:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 184:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 184:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 184:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006dd98
        pSubmits[0]: const VkSubmitInfo = 0x60700006dd98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008bf10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008bf30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008bf50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008bf70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 184:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bb980:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008c070
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008c090
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008c0b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 185:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 185:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 185:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 185:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 185:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 185:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 185:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006de78
        pSubmits[0]: const VkSubmitInfo = 0x60700006de78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008c1d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008c1f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008c210
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008c230
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 185:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bbb00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008c330
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008c350
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008c370
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 186:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 186:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 186:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 186:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 186:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 186:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 186:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x60700006df58
        pSubmits[0]: const VkSubmitInfo = 0x60700006df58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008c490
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008c4b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008c4d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008c4f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 186:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bbc80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008c5f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008c610
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008c630
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 187:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 187:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 187:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 187:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 187:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 187:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 187:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070098
        pSubmits[0]: const VkSubmitInfo = 0x607000070098:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008c750
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008c770
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008c790
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008c7b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 187:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bbe00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008c8b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008c8d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008c8f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 188:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 188:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 188:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 188:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 188:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 188:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 188:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070178
        pSubmits[0]: const VkSubmitInfo = 0x607000070178:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008ca10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008ca30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008ca50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008ca70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 188:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bbf80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008cb70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008cb90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008cbb0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 189:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 189:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 189:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 189:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 189:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 189:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 189:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070258
        pSubmits[0]: const VkSubmitInfo = 0x607000070258:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008ccd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008ccf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008cd10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008cd30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 189:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bc100:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008ce30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008ce50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008ce70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 190:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 190:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 190:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 190:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 190:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 190:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 190:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070338
        pSubmits[0]: const VkSubmitInfo = 0x607000070338:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008cf90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008cfb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008cfd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008cff0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 190:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bc280:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008d0f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008d110
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008d130
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 191:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 191:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 191:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 191:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 191:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 191:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 191:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070418
        pSubmits[0]: const VkSubmitInfo = 0x607000070418:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008d250
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008d270
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008d290
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008d2b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 191:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bc400:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008d3b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008d3d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008d3f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 192:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 192:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 192:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 192:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 192:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 192:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 192:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000704f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000704f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008d510
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008d530
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008d550
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008d570
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 192:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bc580:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008d670
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008d690
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008d6b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 193:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 193:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 193:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 193:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 193:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 193:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 193:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000705d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000705d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008d7d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008d7f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008d810
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008d830
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 193:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bc700:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008d930
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008d950
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008d970
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 194:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 194:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 194:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 194:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 194:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 194:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 194:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000706b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000706b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008da90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008dab0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008dad0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008daf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 194:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bc880:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008dbf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008dc10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008dc30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 195:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 195:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 195:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 195:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 195:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 195:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 195:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070798
        pSubmits[0]: const VkSubmitInfo = 0x607000070798:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008dd50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008dd70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008dd90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008ddb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 195:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bca00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008deb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008ded0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008def0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 196:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 196:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 196:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 196:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 196:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 196:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 196:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070878
        pSubmits[0]: const VkSubmitInfo = 0x607000070878:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008e010
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008e030
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008e050
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008e070
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 196:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bcb80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008e170
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008e190
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008e1b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 197:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 197:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 197:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 197:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 197:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 197:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 197:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070958
        pSubmits[0]: const VkSubmitInfo = 0x607000070958:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008e2d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008e2f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008e310
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008e330
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 197:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bcd00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008e430
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008e450
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008e470
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 198:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 198:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 198:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 198:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 198:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 198:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 198:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070a38
        pSubmits[0]: const VkSubmitInfo = 0x607000070a38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008e590
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008e5b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008e5d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008e5f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 198:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bce80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008e6f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008e710
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008e730
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 199:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 199:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 199:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 199:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 199:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 199:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 199:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070b18
        pSubmits[0]: const VkSubmitInfo = 0x607000070b18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008e850
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008e870
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008e890
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008e8b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 199:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd000:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008e9b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008e9d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008e9f0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 200:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 200:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 200:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 200:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 200:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 200:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 200:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070bf8
        pSubmits[0]: const VkSubmitInfo = 0x607000070bf8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008eb10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008eb30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008eb50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008eb70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 200:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd180:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008ec70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008ec90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008ecb0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 201:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 201:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 201:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 201:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 201:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 201:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 201:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070cd8
        pSubmits[0]: const VkSubmitInfo = 0x607000070cd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008edd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008edf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008ee10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008ee30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 201:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd300:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008ef30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008ef50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008ef70
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 202:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 202:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 202:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 202:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 202:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 202:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 202:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070db8
        pSubmits[0]: const VkSubmitInfo = 0x607000070db8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008f090
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008f0b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008f0d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008f0f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 202:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd480:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008f1f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008f210
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008f230
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 203:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 203:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 203:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 203:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 203:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 203:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 203:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070e98
        pSubmits[0]: const VkSubmitInfo = 0x607000070e98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008f350
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008f370
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008f390
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008f3b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 203:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd600:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008f4b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008f4d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008f4f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 204:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 204:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 204:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 204:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 204:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 204:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 204:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000070f78
        pSubmits[0]: const VkSubmitInfo = 0x607000070f78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008f610
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008f630
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008f650
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008f670
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 204:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd780:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008f770
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008f790
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008f7b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 205:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 205:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 205:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 205:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 205:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 205:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 205:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071058
        pSubmits[0]: const VkSubmitInfo = 0x607000071058:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008f8d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008f8f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008f910
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008f930
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 205:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bd900:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008fa30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008fa50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008fa70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 206:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 206:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 206:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 206:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 206:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 206:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 206:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071138
        pSubmits[0]: const VkSubmitInfo = 0x607000071138:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008fb90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008fbb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008fbd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008fbf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 206:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bda80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008fcf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008fd10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200008fd30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 207:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 207:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 207:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 207:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 207:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 207:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 207:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071218
        pSubmits[0]: const VkSubmitInfo = 0x607000071218:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200008fe50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200008fe70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200008fe90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200008feb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 207:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bdc00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200008ffd0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200008fff0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000092010
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 208:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 208:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 208:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 208:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 208:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 208:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 208:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000712f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000712f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000092130
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000092150
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000092170
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000092190
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 208:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bdd80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000092270
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000092290
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000922b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 209:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 209:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 209:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 209:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 209:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 209:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 209:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000713d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000713d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000923d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000923f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000092410
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000092430
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 209:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bdf00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000092530
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000092550
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000092570
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 210:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 210:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 210:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 210:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 210:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 210:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 210:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000714b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000714b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000092690
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000926b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000926d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000926f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 210:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be080:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000927f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000092810
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000092830
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 211:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 211:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 211:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 211:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 211:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 211:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 211:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071598
        pSubmits[0]: const VkSubmitInfo = 0x607000071598:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000092950
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000092970
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000092990
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000929b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 211:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be200:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000092ab0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000092ad0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000092af0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 212:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 212:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 212:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 212:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 212:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 212:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 212:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071678
        pSubmits[0]: const VkSubmitInfo = 0x607000071678:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000092c10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000092c30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000092c50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000092c70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 212:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be380:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000092d70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000092d90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000092db0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 213:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 213:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 213:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 213:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 213:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 213:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 213:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071758
        pSubmits[0]: const VkSubmitInfo = 0x607000071758:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000092ed0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000092ef0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000092f10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000092f30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 213:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be500:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000093030
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000093050
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000093070
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 214:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 214:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 214:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 214:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 214:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 214:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 214:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071838
        pSubmits[0]: const VkSubmitInfo = 0x607000071838:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000093190
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000931b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000931d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000931f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 214:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be680:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000932f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000093310
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000093330
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 215:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 215:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 215:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 215:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 215:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 215:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 215:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071918
        pSubmits[0]: const VkSubmitInfo = 0x607000071918:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000093450
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000093470
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000093490
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000934b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 215:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be800:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000935b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000935d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000935f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 216:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 216:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 216:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 216:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 216:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 216:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 216:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000719f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000719f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000093710
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000093730
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000093750
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000093770
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 216:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002be980:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000093870
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000093890
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000938b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 217:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 217:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 217:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 217:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 217:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 217:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 217:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071ad8
        pSubmits[0]: const VkSubmitInfo = 0x607000071ad8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000939d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000939f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000093a10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000093a30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 217:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002beb00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000093b30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000093b50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000093b70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 218:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 218:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 218:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 218:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 218:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 218:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 218:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071bb8
        pSubmits[0]: const VkSubmitInfo = 0x607000071bb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000093c90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000093cb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000093cd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000093cf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 218:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bec80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000093df0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000093e10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000093e30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 219:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 219:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 219:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 219:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 219:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 219:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 219:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071c98
        pSubmits[0]: const VkSubmitInfo = 0x607000071c98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000093f50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000093f70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000093f90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000093fb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 219:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bee00:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000950b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000950d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000950f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 220:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 220:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 220:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 220:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 220:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 220:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 220:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071d78
        pSubmits[0]: const VkSubmitInfo = 0x607000071d78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000095210
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000095230
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000095250
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000095270
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 220:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002bef80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000095370
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000095390
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000953b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 221:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 221:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 221:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 221:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 221:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 221:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 221:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071e58
        pSubmits[0]: const VkSubmitInfo = 0x607000071e58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000954d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000954f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000095510
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000095530
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 221:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0120:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000095630
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000095650
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000095670
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 222:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 222:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 222:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 222:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 222:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 222:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 222:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000071f38
        pSubmits[0]: const VkSubmitInfo = 0x607000071f38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000095790
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000957b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000957d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000957f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 222:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c02a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000958f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000095910
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000095930
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 223:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 223:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 223:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 223:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 223:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 223:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 223:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072018
        pSubmits[0]: const VkSubmitInfo = 0x607000072018:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000095a50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000095a70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000095a90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000095ab0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 223:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0420:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000095bb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000095bd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000095bf0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 224:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 224:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 224:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 224:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 224:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 224:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 224:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000720f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000720f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000095d10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000095d30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000095d50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000095d70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 224:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c05a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000095e70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000095e90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000095eb0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 225:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 225:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 225:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 225:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 225:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 225:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 225:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000721d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000721d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000095fd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000095ff0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000096010
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000096030
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 225:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0720:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000096130
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000096150
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000096170
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 226:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 226:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 226:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 226:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 226:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 226:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 226:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000722b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000722b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000096290
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000962b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000962d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000962f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 226:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c08a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000963f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000096410
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000096430
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 227:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 227:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 227:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 227:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 227:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 227:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 227:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072398
        pSubmits[0]: const VkSubmitInfo = 0x607000072398:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000096550
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000096570
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000096590
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000965b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 227:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0a20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000966b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000966d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000966f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 228:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 228:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 228:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 228:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 228:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 228:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 228:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072478
        pSubmits[0]: const VkSubmitInfo = 0x607000072478:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000096810
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000096830
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000096850
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000096870
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 228:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0ba0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000096970
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000096990
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000969b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 229:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 229:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 229:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 229:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 229:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 229:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 229:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072558
        pSubmits[0]: const VkSubmitInfo = 0x607000072558:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000096ad0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000096af0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000096b10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000096b30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 229:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0d20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000096c50
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000096c70
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000096c90
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 230:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 230:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 230:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 230:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 230:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 230:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 230:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072638
        pSubmits[0]: const VkSubmitInfo = 0x607000072638:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000096db0
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000096dd0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000096df0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000096e10
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 230:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c0ea0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000096ef0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000096f10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000096f30
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 231:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 231:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 231:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 231:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 231:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 231:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 231:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072718
        pSubmits[0]: const VkSubmitInfo = 0x607000072718:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000097050
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000097070
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000097090
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000970b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 231:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1020:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000971b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000971d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000971f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 232:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 232:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 232:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 232:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 232:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 232:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 232:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000727f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000727f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000097310
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000097330
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000097350
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000097370
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 232:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c11a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000097470
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000097490
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000974b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 233:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 233:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 233:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 233:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 233:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 233:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 233:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000728d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000728d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000975d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000975f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000097610
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000097630
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 233:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1320:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000097730
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000097750
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000097770
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 234:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 234:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 234:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 234:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 234:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 234:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 234:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000729b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000729b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000097890
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000978b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000978d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000978f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 234:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c14a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000979f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000097a10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000097a30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 235:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 235:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 235:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 235:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 235:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 235:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 235:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072a98
        pSubmits[0]: const VkSubmitInfo = 0x607000072a98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000097b50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000097b70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000097b90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000097bb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 235:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1620:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000097cb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000097cd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000097cf0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 236:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 236:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 236:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 236:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 236:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 236:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 236:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072b78
        pSubmits[0]: const VkSubmitInfo = 0x607000072b78:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000097e10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000097e30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000097e50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000097e70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 236:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c17a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000097f70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000097f90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000097fb0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 237:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 237:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 237:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 237:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 237:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 237:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 237:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072c58
        pSubmits[0]: const VkSubmitInfo = 0x607000072c58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000980d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000980f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000098110
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000098130
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 237:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1920:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000098230
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000098250
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000098270
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 238:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 238:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 238:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 238:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 238:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 238:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 238:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072d38
        pSubmits[0]: const VkSubmitInfo = 0x607000072d38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000098390
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000983b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000983d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000983f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 238:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1aa0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000984f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000098510
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000098530
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 239:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 239:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 239:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 239:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 239:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 239:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 239:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072e18
        pSubmits[0]: const VkSubmitInfo = 0x607000072e18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000098650
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000098670
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000098690
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000986b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 239:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1c20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000987d0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000987f0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000098810
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 240:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 240:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 240:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 240:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 240:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 240:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 240:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072ef8
        pSubmits[0]: const VkSubmitInfo = 0x607000072ef8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000098930
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000098950
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000098970
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000098990
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 240:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1da0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000098a70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000098a90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000098ab0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 241:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 241:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 241:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 241:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 241:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 241:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 241:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000072fd8
        pSubmits[0]: const VkSubmitInfo = 0x607000072fd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000098bd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000098bf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000098c10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000098c30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 241:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c1f20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000098d30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000098d50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000098d70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 242:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 242:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 242:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 242:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 242:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 242:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 242:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000730b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000730b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000098e90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000098eb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000098ed0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000098ef0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 242:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c20a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000098ff0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000099010
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000099030
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 243:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 243:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 243:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 243:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 243:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 243:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 243:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073198
        pSubmits[0]: const VkSubmitInfo = 0x607000073198:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000099150
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000099170
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000099190
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000991b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 243:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2220:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000992b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000992d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000992f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 244:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 244:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 244:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 244:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 244:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 244:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 244:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073278
        pSubmits[0]: const VkSubmitInfo = 0x607000073278:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000099410
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000099430
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000099450
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000099470
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 244:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c23a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000099570
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000099590
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000995b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 245:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 245:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 245:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 245:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 245:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 245:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 245:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073358
        pSubmits[0]: const VkSubmitInfo = 0x607000073358:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000996d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000996f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000099710
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000099730
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 245:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2520:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000099830
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000099850
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000099870
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 246:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 246:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 246:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 246:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 246:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 246:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 246:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073438
        pSubmits[0]: const VkSubmitInfo = 0x607000073438:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000099990
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000999b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000999d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000999f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 246:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c26a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000099af0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000099b10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000099b30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 247:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 247:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 247:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 247:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 247:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 247:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 247:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073518
        pSubmits[0]: const VkSubmitInfo = 0x607000073518:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000099c50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000099c70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000099c90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000099cb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 247:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2820:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x602000099db0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x602000099dd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x602000099df0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 248:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 248:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 248:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 248:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 248:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 248:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 248:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000735f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000735f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x602000099f10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x602000099f30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x602000099f50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x602000099f70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 248:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c29a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009a070
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009a090
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009a0b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 249:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 249:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 249:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 249:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 249:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 249:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 249:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000736d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000736d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009a1d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009a1f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009a210
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009a230
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 249:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2b20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009a330
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009a350
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009a370
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 250:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 250:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 250:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 250:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 250:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 250:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 250:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000737b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000737b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009a490
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009a4b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009a4d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009a4f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 250:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2ca0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009a5f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009a610
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009a630
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 251:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 251:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 251:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 251:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 251:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 251:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 251:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073898
        pSubmits[0]: const VkSubmitInfo = 0x607000073898:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009a750
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009a770
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009a790
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009a7b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 251:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2e20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009a8b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009a8d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009a8f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 252:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 252:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 252:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 252:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 252:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 252:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 252:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073978
        pSubmits[0]: const VkSubmitInfo = 0x607000073978:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009aa10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009aa30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009aa50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009aa70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 252:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c2fa0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009ab70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009ab90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009abb0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 253:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 253:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 253:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 253:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 253:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 253:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 253:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073a58
        pSubmits[0]: const VkSubmitInfo = 0x607000073a58:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009acd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009acf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009ad10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009ad30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 253:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3120:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009ae30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009ae50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009ae70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 254:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 254:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 254:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 254:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 254:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 254:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 254:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073b38
        pSubmits[0]: const VkSubmitInfo = 0x607000073b38:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009af90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009afb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009afd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009aff0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 254:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c32a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009b0f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009b110
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009b130
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 255:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 255:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 255:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 255:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 255:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 255:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 255:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073c18
        pSubmits[0]: const VkSubmitInfo = 0x607000073c18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009b250
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009b270
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009b290
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009b2b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 255:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3420:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009b3b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009b3d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009b3f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 256:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 256:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 256:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 256:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 256:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 256:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 256:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073cf8
        pSubmits[0]: const VkSubmitInfo = 0x607000073cf8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009b510
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009b530
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009b550
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009b570
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 256:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c35a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009b670
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009b690
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009b6b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 257:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 257:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 257:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 257:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 257:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 257:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 257:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073dd8
        pSubmits[0]: const VkSubmitInfo = 0x607000073dd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009b7d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009b7f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009b810
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009b830
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 257:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3720:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009b930
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009b950
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009b970
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 258:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 258:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 258:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 258:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 258:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 258:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 258:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073eb8
        pSubmits[0]: const VkSubmitInfo = 0x607000073eb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009ba90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009bab0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009bad0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009baf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 258:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c38a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009bbf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009bc10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009bc30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 259:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 259:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 259:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 259:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 259:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 259:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 259:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000073f98
        pSubmits[0]: const VkSubmitInfo = 0x607000073f98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009bd50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009bd70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009bd90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009bdb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 259:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3a20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009beb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009bed0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009bef0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 260:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 260:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 260:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 260:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 260:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 260:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 260:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074078
        pSubmits[0]: const VkSubmitInfo = 0x607000074078:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009c010
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009c030
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009c050
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009c070
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 260:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3ba0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009c170
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009c190
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009c1b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 261:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 261:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 261:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 261:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 261:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 261:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 261:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074158
        pSubmits[0]: const VkSubmitInfo = 0x607000074158:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009c2d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009c2f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009c310
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009c330
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 261:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3d20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009c430
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009c450
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009c470
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 262:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 262:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 262:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 262:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 262:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 262:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 262:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074238
        pSubmits[0]: const VkSubmitInfo = 0x607000074238:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009c590
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009c5b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009c5d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009c5f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 262:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c3ea0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009c6f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009c710
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009c730
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 263:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 263:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 263:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 263:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 263:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 263:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 263:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074318
        pSubmits[0]: const VkSubmitInfo = 0x607000074318:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009c850
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009c870
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009c890
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009c8b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 263:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4020:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009c9b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009c9d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009c9f0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 264:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 264:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 264:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 264:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 264:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 264:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 264:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000743f8
        pSubmits[0]: const VkSubmitInfo = 0x6070000743f8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009cb10
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009cb30
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009cb50
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009cb70
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 264:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c41a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009cc70
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009cc90
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009ccb0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 265:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 265:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 265:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 265:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 265:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 265:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 265:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000744d8
        pSubmits[0]: const VkSubmitInfo = 0x6070000744d8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009cdd0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009cdf0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009ce10
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009ce30
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 265:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4320:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009cf30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009cf50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009cf70
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 266:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 266:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 266:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 266:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 266:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 266:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 266:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x6070000745b8
        pSubmits[0]: const VkSubmitInfo = 0x6070000745b8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009e090
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009e0b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009e0d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009e0f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 266:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c44a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009e1f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009e210
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009e230
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 267:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 267:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 267:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 267:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 267:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 267:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 267:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074698
        pSubmits[0]: const VkSubmitInfo = 0x607000074698:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009e350
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009e370
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009e390
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009e3b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 267:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4620:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009e4b0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009e4d0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009e4f0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 268:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 268:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 268:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 268:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 268:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 268:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 268:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074778
        pSubmits[0]: const VkSubmitInfo = 0x607000074778:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009e610
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009e630
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009e650
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009e670
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 268:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c47a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009e770
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009e790
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009e7b0
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 269:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 269:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 269:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 269:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 269:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 269:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 269:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074858
        pSubmits[0]: const VkSubmitInfo = 0x607000074858:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009e8d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009e8f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009e910
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009e930
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 269:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4920:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009ea30
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009ea50
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009ea70
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 270:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 270:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 270:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 270:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 270:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 270:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 270:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074938
        pSubmits[0]: const VkSubmitInfo = 0x607000074938:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009eb90
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009ebb0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009ebd0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009ebf0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 270:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4aa0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009ecf0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009ed10
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009ed30
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 271:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 271:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 271:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 271:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 271:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 271:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 271:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074a18
        pSubmits[0]: const VkSubmitInfo = 0x607000074a18:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009ee50
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009ee70
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009ee90
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009eeb0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 271:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4c20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009efb0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009efd0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009eff0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 272:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 272:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 272:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 272:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 272:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 272:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 272:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074af8
        pSubmits[0]: const VkSubmitInfo = 0x607000074af8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009f110
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009f130
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009f150
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009f170
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 272:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4da0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009f270
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009f290
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009f2b0
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 273:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 273:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 1

Thread 0, Frame 273:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 273:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f754000

Thread 0, Frame 273:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40

Thread 0, Frame 273:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 273:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074bd8
        pSubmits[0]: const VkSubmitInfo = 0x607000074bd8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009f3d0
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009f3f0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009f410
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000080ed8
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009f430
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 273:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c4f20:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009f530
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009f550
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009f570
            pImageIndices[0]: const uint32_t = 1
        pResults: VkResult* = NULL

Thread 0, Frame 274:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 274:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 274:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 274:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 274:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 274:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 274:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074cb8
        pSubmits[0]: const VkSubmitInfo = 0x607000074cb8:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009f690
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009f6b0
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009f6d0
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009f6f0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 274:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c50a0:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009f7f0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009f810
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009f830
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 275:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 275:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x604000219290
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 2

Thread 0, Frame 275:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 275:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f755000

Thread 0, Frame 275:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0

Thread 0, Frame 275:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cfe0

Thread 0, Frame 275:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000074d98
        pSubmits[0]: const VkSubmitInfo = 0x607000074d98:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x60200009f950
                pWaitSemaphores[0]: const VkSemaphore = 0x604000219290
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x60200009f970
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x60200009f990
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000081018
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x60200009f9b0
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219350
    fence: VkFence = 0x60e00003cfe0

Thread 0, Frame 275:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c5220:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x60200009fad0
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219350
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x60200009faf0
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x60200009fb10
            pImageIndices[0]: const uint32_t = 2
        pResults: VkResult* = NULL

Thread 0, Frame 276:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cf00
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 276:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    timeout: uint64_t = 18446744073709551615
    semaphore: VkSemaphore = 0x6040002190d0
    fence: VkFence = 0x0
    pImageIndex: uint32_t* = 0

Thread 0, Frame 276:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc650
        pFences[0]: const VkFence = 0x60e00003cfe0
    waitAll: VkBool32 = 1
    timeout: uint64_t = 18446744073709551615

Thread 0, Frame 276:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    offset: VkDeviceSize = 0
    size: VkDeviceSize = 18446744073709551615
    flags: VkMemoryMapFlags = 0
    ppData: void** = 0x11f753000

Thread 0, Frame 276:
vkUnmapMemory(device, memory) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0

Thread 0, Frame 276:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918
    fenceCount: uint32_t = 1
    pFences: const VkFence* = 0x7ffedffdc670
        pFences[0]: const VkFence = 0x60e00003cf00

Thread 0, Frame 276:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    submitCount: uint32_t = 1
    pSubmits: const VkSubmitInfo* = 0x607000075a48
        pSubmits[0]: const VkSubmitInfo = 0x607000075a48:
            sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext: const void* = NULL
            waitSemaphoreCount: uint32_t = 1
            pWaitSemaphores: const VkSemaphore* = 0x6020000a0510
                pWaitSemaphores[0]: const VkSemaphore = 0x6040002190d0
            pWaitDstStageMask: const VkPipelineStageFlags* = 0x6020000a0530
                pWaitDstStageMask[0]: const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount: uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 0x6020000a0550
                pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
            signalSemaphoreCount: uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 0x6020000a0570
                pSignalSemaphores[0]: const VkSemaphore = 0x604000219190
    fence: VkFence = 0x60e00003cf00

Thread 0, Frame 276:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue: VkQueue = 0x60c000062398
    pPresentInfo: const VkPresentInfoKHR* = 0x6060002c5e80:
        sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext: const void* = NULL
        waitSemaphoreCount: uint32_t = 1
        pWaitSemaphores: const VkSemaphore* = 0x6020000a0670
            pWaitSemaphores[0]: const VkSemaphore = 0x604000219190
        swapchainCount: uint32_t = 1
        pSwapchains: const VkSwapchainKHR* = 0x6020000a0690
            pSwapchains[0]: const VkSwapchainKHR = 0x61e000052880
        pImageIndices: const uint32_t* = 0x6020000a06b0
            pImageIndices[0]: const uint32_t = 0
        pResults: VkResult* = NULL

Thread 0, Frame 277:
vkDeviceWaitIdle(device) returns VkResult VK_SUCCESS (0):
    device: VkDevice = 0x622000052918

Thread 0, Frame 277:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    semaphore: VkSemaphore = 0x6040002190d0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    semaphore: VkSemaphore = 0x604000219190
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyFence(device, fence, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    fence: VkFence = 0x60e00003cf00
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    semaphore: VkSemaphore = 0x604000219290
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    semaphore: VkSemaphore = 0x604000219350
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyFence(device, fence, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    fence: VkFence = 0x60e00003cfe0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d2100
    commandBufferCount: uint32_t = 3
    pCommandBuffers: const VkCommandBuffer* = 0x6030001a94a0
        pCommandBuffers[0]: const VkCommandBuffer = 0x611000074598
        pCommandBuffers[1]: const VkCommandBuffer = 0x611000080ed8
        pCommandBuffers[2]: const VkCommandBuffer = 0x611000081018

Thread 0, Frame 277:
vkDestroyDescriptorPool(device, descriptorPool, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    descriptorPool: VkDescriptorPool = 0x619000082a80
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000212e0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cbc0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000213d0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cd40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000214c0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005cec0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyFramebuffer(device, framebuffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    framebuffer: VkFramebuffer = 0x60b00005c920
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyFramebuffer(device, framebuffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    framebuffer: VkFramebuffer = 0x60b00005c9d0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyFramebuffer(device, framebuffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    framebuffer: VkFramebuffer = 0x60b00005ca80
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    imageView: VkImageView = 0x610000022840
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImage(device, image, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    image: VkImage = 0x61200004b7c0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200004b940
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    imageView: VkImageView = 0x610000022740
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImage(device, image, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    image: VkImage = 0x61200004b4c0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200004b640
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyPipeline(device, pipeline, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    pipeline: VkPipeline = 0x61b00002ae80
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyPipelineLayout(device, pipelineLayout, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    pipelineLayout: VkPipelineLayout = 0x614000024440
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyRenderPass(device, renderPass, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    renderPass: VkRenderPass = 0x60b000059c70
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    imageView: VkImageView = 0x610000017b40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    imageView: VkImageView = 0x610000017c40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    imageView: VkImageView = 0x610000017d40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    swapchain: VkSwapchainKHR = 0x61e000052880
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    descriptorSetLayout: VkDescriptorSetLayout = 0x61100002e940
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroySampler(device, sampler, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    sampler: VkSampler = 0x60f000020e30
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImageView(device, imageView, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    imageView: VkImageView = 0x610000024d40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyImage(device, image, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    image: VkImage = 0x61200004bc40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200004bdc0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f000021010
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005c740
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    buffer: VkBuffer = 0x60f0000211f0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkFreeMemory(device, memory, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    memory: VkDeviceMemory = 0x61200005ca40
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyCommandPool(device, commandPool, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d2100
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyCommandPool(device, commandPool, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    commandPool: VkCommandPool = 0x6260000d5100
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyDevice(device, pAllocator) returns void:
    device: VkDevice = 0x622000052918
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroySurfaceKHR(instance, surface, pAllocator) returns void:
    instance: VkInstance = 0x62900005a200
    surface: VkSurfaceKHR = 0x60700003f870
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator) returns void:
    instance: VkInstance = 0x62900005a200
    messenger: VkDebugUtilsMessengerEXT = 0x602000030570
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 277:
vkDestroyInstance(instance, pAllocator) returns void:
    instance: VkInstance = 0x62900005a200
    pAllocator: const VkAllocationCallbacks* = NULL

